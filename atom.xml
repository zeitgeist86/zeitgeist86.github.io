<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yihong&#39;s Whiteboard</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-03T12:46:25.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Yihong Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随机分析笔记</title>
    <link href="http://example.com/2020/08/15/stochastic1/"/>
    <id>http://example.com/2020/08/15/stochastic1/</id>
    <published>2020-08-14T16:42:21.000Z</published>
    <updated>2020-12-03T12:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件期望">条件期望</h1><h2 id="定义">1. 定义</h2><p>简言之，条件期望是对随机变量<span class="math inline">\(Y\)</span>给定条件（随机变量）<span class="math inline">\(X\)</span>时最好的猜测.记作<span class="math inline">\(E(Y|X)\)</span>.显然，<span class="math inline">\(Y\)</span>本身也是随机变量.我们使用<span class="math inline">\(\mathbb{E}(Y)\)</span>表示常规的期望.</p><p>令域流<span class="math inline">\(\mathcal{F}_n\)</span>为随机变量<span class="math inline">\(X_1,\ldots,X_n\)</span>中的信息，则<span class="math inline">\(E(Y\vert X_1,\ldots,X_n)=E({Y\vert \mathcal{F}_n})\)</span>.当知道信息时，可以确认<span class="math inline">\(Y\)</span>的唯一值时，我们称<span class="math inline">\(E({Y\vert \mathcal{F}_n})\)</span>为<span class="math inline">\(\mathcal{F}_n\)</span>可测的.当我们没有信息时，<span class="math inline">\(E(Y|\mathcal{F}_0)=\mathbb{E}(Y)\)</span>. <span id="more"></span></p><h2 id="性质">2. 性质</h2><p>条件期望<span class="math inline">\(E({Y\vert \mathcal{F}_n})\)</span>具有如下性质：</p><ul><li>若<span class="math inline">\(Y\)</span>是<span class="math inline">\(\mathcal{F}_n\)</span>可测的，则<span class="math inline">\(E({Y\vert \mathcal{F}_n})=Y\)</span>.</li><li>若<span class="math inline">\(Y\)</span>独立于<span class="math inline">\(X_1,\ldots,X_n\)</span>，显然知道<span class="math inline">\(\{X_n\}\)</span>的信息无益于猜测<span class="math inline">\(Y\)</span>的值.即<span class="math inline">\(E({Y\vert \mathcal{F}_n})=\mathbb{E}(Y)\)</span>.</li><li><strong>Law of Iterated Expecations</strong>：<span class="math inline">\(\mathbb{E}(E({Y\vert \mathcal{F}_n}))=\mathbb{E}(Y)\)</span>；设想计算某年级学生成绩<span class="math inline">\(X\)</span>的平均分，可以加总所有成绩并除以人数，即<span class="math inline">\(\mathbb{E}(X)\)</span>，也可也按照班级或者性别等信息<span class="math inline">\(Y\)</span>先平均各班级内，再平均各班级.即<span class="math inline">\(\mathbb{E}(E(X\vert Y))\)</span>.显然两种方法得到的成绩平均分相等.</li><li>Linearity：<span class="math inline">\(E[aY+bZ\vert{\mathcal{F}_n}]=aE(Y|\mathcal{F}_n)+bE(Z|\mathcal{F}_n)\)</span>.常数<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span>可以扩展至任意<span class="math inline">\(\mathcal{F}_n\)</span>可测的随机变量.</li><li>Tower/Projection Property：若<span class="math inline">\(n&gt;m\)</span>，则<span class="math inline">\(E[E(Y|\mathcal{F}_n)\vert\mathcal{F}_m]=E[Y|\mathcal{F}_m]\)</span>.这条性质是Law of Iterated Expecations的推广：我们将原来的<span class="math inline">\(\mathcal{F}_0\)</span>推广至<span class="math inline">\(\mathcal{F}_m\)</span>.</li></ul><h1 id="鞅">鞅</h1><h2 id="定义-1">1. 定义</h2><p>一个随机变量序列<span class="math inline">\(M_0, M_1,\ldots\)</span>是一个关于域流<span class="math inline">\(\mathcal{F_n}\)</span>的鞅（Martingale），如果</p><ul><li><span class="math inline">\(\forall j, \mathbb{E}(|M_j|)&lt;\infty\)</span>；</li><li>鞅性：<span class="math inline">\(\forall{n&lt;m}, E(M_n|\mathcal{F}_m)=M_n\)</span>. 等价于<span class="math inline">\(E(M_{n+1}-M_n|\mathcal{F}_n)=0\)</span>.特别地，当<span class="math inline">\(E(M_{n+1}-M_n|\mathcal{F}_n)\geq 0\)</span>时，称为下鞅（submartingale），反之成为上鞅（supermartingale）.</li></ul><p><strong>概括一下，鞅认为对明天最好的猜测就是今天已知的值.</strong></p><h2 id="性质-1">2. 性质</h2><p>鞅可以被定义在离散的时间上，也可也定义在连续的时间上.</p><p>由于鞅性，我们认为鞅是"公平的游戏"（fair game）. <em>You cannot beat a fair game!</em></p><p>&lt;code style="color:white; background-color: #800000&gt;Example</code> <span class="math inline">\(x_1, x_2,\ldots\)</span> are i.i.d. r.v.s. <span class="math inline">\(\mathbb{E}(X_j)=0\)</span>. Let <span class="math inline">\(M_n=x_1+\ldots+x_n\)</span>, then <span class="math inline">\(M_n\)</span> is a martingale w.r.t. <span class="math inline">\(\mathcal{F}_n\)</span>.</p><h1 id="鞅与停时">鞅与停时</h1><h2 id="停时与公平的策略">1. 停时与公平的策略</h2><p>事实上，上文的“You cannot beat a fair game!”有更精确的表述：</p><blockquote><p><strong>You cannot beat a fair game with a fair strategy!</strong></p></blockquote><p>这里的“fair game”是鞅，而“fair strategy”指的是<strong>停时</strong>（stopping time）.</p><p>考虑如下游戏：</p><p><code style="color:white; background-color: #800000">Example</code> Martingale Betting Strategy</p><p>赌博n元，通过抛硬币的正反面决定输赢.若正面，赢n元，反之输n元.</p><p>显然这个游戏的收益是鞅，但我们仍然有稳赢的策略： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631179029/sto_gambler_ruin.png" /> 只要游戏一直进行下去，我们总能以<span class="math inline">\(+1\)</span>元的收益结束游戏.</p><p>我们似乎赢了一场公平的游戏，但唯一的问题是，我们用了不公平的策略.若游戏<strong>不能一直进行，显然我们不会一直赢得游戏</strong>.这便是“停时”不太精确的定义，也就是上文所述“公平”的策略.</p><h2 id="optional-stopping-theorem">2. Optional Stopping Theorem</h2><p>下面我们引出 <strong>(Doob's) Optional Sampling/Stopping Theorem</strong>：</p><p>若<span class="math inline">\(M_0,M_1,M_2,\ldots\)</span>是关于<span class="math inline">\(\mathcal{F}_0,\mathcal{F}_1,\mathcal{F}_2,\ldots\)</span> 的鞅，<span class="math inline">\(T\)</span>是停时，且令<span class="math inline">\(\tilde{M}_n:=M_{n\wedge{T}}:=M_{\min\{n,T\}}\)</span>，则<span class="math inline">\(\tilde{M_n}\)</span>是鞅，且<span class="math inline">\(\mathbb{E}(\tilde{M}_n)=\mathbb{E}(M_0)\)</span>.</p><h1 id="布朗运动">布朗运动</h1><h2 id="定义-2">1. 定义</h2><p>布朗运动（Brownian motion）可以被视为随机游走的“极限”，也就是连续的随机运动.用<span class="math inline">\(B_t\)</span>指代在时间<span class="math inline">\(t\)</span>时到达的位置.布朗运动在金融中也被称为维纳过程<span class="math inline">\(W_t\)</span>（Wiener process）.</p><p>带有<strong>漂移</strong>（drift）<span class="math inline">\(m\)</span>和<strong>波动</strong>（volatility）<span class="math inline">\(\sigma\)</span>的一维布朗运动被定义为： - <span class="math inline">\(B_0=0\)</span>. - <strong>Independent increments</strong>：若<span class="math inline">\(s&lt; t\)</span>，则<span class="math inline">\(B_t-B_s\)</span>独立于<span class="math inline">\(\{B_r:r\leq{s}\}\)</span>. - Stationary/<strong>Indentically distributed increments</strong>：若<span class="math inline">\(s&lt; t\)</span>，则<span class="math inline">\(B_t-B_s\)</span>与<span class="math inline">\(B_{t-s}-B_0\)</span>同分布. 该分布为<span class="math inline">\(B_t-B_s\sim{N(m(t-s),\sigma^2(t-s))}\)</span>. 特别的，当<span class="math inline">\(m=0, \sigma=1\)</span>时为标准布朗运动. - <strong>Continuity</strong>：<span class="math inline">\(B_t\)</span>是<span class="math inline">\(t\)</span>的连续函数.</p><h2 id="性质-2">2. 性质</h2><p>一维布朗运动有如下性质：</p><ul><li>矩：<span class="math inline">\(\mathbb{E}(B_t)=\mathbb{E}(B_s+B_t-B_s)=\mathbb{E}(B_s)+\mathbb{E}(B_{t-s}),\)</span> <span class="math inline">\(\text{Var}(B_t)=\text{Var}(B_s+B_t-B_s)=\text{Var}({B_s})+\text{Var}(B_{t-s}).\)</span><br> 特别地，若<span class="math inline">\(s\leq t\)</span>，对于<strong>协方差</strong>，我们有<br> <span class="math inline">\(\text{Cov}(B_s,B_t)=\mathbb{E}(B_sB_t)=\mathbb{E}(B_s(B_s+B_t-B_s))=s=s\wedge{t}\)</span><br></li><li>若<span class="math inline">\(B_t\)</span>是标准布朗运动，则<span class="math inline">\(Y_t=mt+\sigma{B_t}\)</span>为具有漂移<span class="math inline">\(m\)</span>和波动<span class="math inline">\(\sigma\)</span>的布朗运动.</li><li><strong>布朗运动处处不可导.</strong> 直觉地，对于普通<span class="math inline">\(C^1\)</span>连续性的函数而言，某点的导数取决于它的“过去”：<span class="math inline">\(f&#39;(x)=\frac{f(x)-f(\Delta x)}{\Delta x}\)</span>.然而，布朗运动的“过去”与“现在”独立，故布朗运动处处不可导，只有<span class="math inline">\(C^0\)</span>连续性.</li><li><strong>标准布朗运动是连续鞅.</strong></li><li>布朗运动是马尔可夫过程，也是高斯过程.</li><li>放缩（scaling）：若<span class="math inline">\(B_t\)</span>是一个标准布朗运动，令<span class="math inline">\(a&gt;0\)</span>，则<span class="math inline">\(Y_t=\frac{1}{\sqrt{a}}B_{at}\)</span>也是一个标准布朗运动.</li><li><strong>Strong Markov Property</strong>：若<span class="math inline">\(T\)</span>是停时且<span class="math inline">\(\mathbb{P}({T&lt; \infty})=1\)</span>（一定停）,则<span class="math inline">\(Y_t=B_{T+t}-B_T\)</span>是标准布朗运动，且<span class="math inline">\(Y\)</span>独立于<span class="math inline">\(\{B_t:0\leq{t}\leq{T}\}\)</span>.</li><li><strong>Reflection Property</strong>（反射原理）：</li></ul><p><span class="math display">\[\begin{aligned}    \mathbb{P}\left\{\text{布朗运动在时间}t\text{前抵达}a\right\}&amp;= \mathbb{P}\left\{\max_{0\leq s \leq t}B_s\geq a\right\} \\    &amp;= 2\left[1-\Phi\left(\frac{a}{\sqrt{t}}\right)\right]\end{aligned}\]</span></p><p><code style="color:white; background-color: #800000">Example</code> 证明反射定理：</p><p>Compute <span class="math inline">\(\mathbb{P}\left\{ {B_t\geq a}\right\}\)</span> first. This is the probability of exceeding <span class="math inline">\(a\)</span> at time <span class="math inline">\(t\)</span>.</p><p>We know that <span class="math inline">\(B_t\sim N(0,t)\)</span>，so <span class="math inline">\(\sqrt{t}B_1\sim N(0,t)\)</span>.</p><p>From the same distribution of <span class="math inline">\(N(0,t)\)</span>, we have</p><p><span class="math display">\[\begin{aligned}\mathbb{P}\left\{B_t\geq a\right\}&amp;= \mathbb{P}\left\{\sqrt{t}{B_1\geq a}\right\} \\                       &amp;= \mathbb{P}\left\{B_1\geq\frac{a}{\sqrt{t} }\right\} \\                       &amp;= 1-\Phi\left(\frac{a}{\sqrt{t} }\right).\end{aligned}\]</span></p><p>Using strong Markov property, we have <span class="math display">\[\mathbb{P}\left\{B_t\geq{a}\vert\max_{0\leq s\leq t}\right\}= \frac{1}{2}\]</span></p><p>Let <span class="math inline">\(T_a=\min\{s:B_s\geq a\}=\min\{s:B_s=a\}\)</span>, which is the first time BM reaches <span class="math inline">\(a\)</span>. The second equality holds because <span class="math inline">\(B_s\)</span> is continuous and <span class="math inline">\(B_0=0\)</span>.<br></p><p>The probability we want to calculate can then be paraphrase as <span class="math display">\[\mathbb{P}\left\{\max_{0\leq s \leq t}B_s\geq a\right\}=\mathbb{P}\left\{T_a\leq t\right\}=\mathbb{P}\left\{T_a&lt; t\right\}.\]</span></p><p>Obviously <span class="math inline">\(B_{T_a}=a\)</span>, then <span class="math display">\[\begin{aligned}\mathbb{P}\left\{B_t&gt; a\right\}&amp;=\mathbb{P}\left\{\max_{0\leq s \leq t}B_s\geq a, B_t&gt; a\right\}\\&amp;=\mathbb{P}\left\{T_a&lt; t, B_t&gt; B_{T_a}\right\}\\&amp;=\mathbb{P}\{T_a&lt; t\}\mathbb{P}\left\{B_t-B_{T_a}&gt; 0|T_a&lt; t\right\}.\end{aligned}\]</span> Using strong Markov property, we know that <span class="math inline">\(B_t-B_{T_a}\)</span> is also a standard Brownian motion. We denote the new Brownian motion as <span class="math inline">\(Y_t\)</span>.</p><p>Then</p><p><span class="math display">\[\mathbb{P}\left\{B_t-B_{T_a}&gt; 0|T_a&lt; t\right\}=\mathbb{P}\{Y_t&gt; 0\}=1-\Phi\left(\frac{0}{\sqrt{t}}\right)=\frac{1}{2}.\]</span> Plug the conditional probability back, we have <span class="math display">\[\mathbb{P}\{T_a&lt; t\}=\frac{\mathbb{P}\{B_t&gt; a\} }{\frac{1}{2} }=2\left[1-\Phi\left(\frac{a}{\sqrt{t} }\right)\right].\]</span></p><h2 id="用计算机生成布朗运动">3. 用计算机生成布朗运动</h2><p>标准布朗运动的计算机模拟如下，其他布朗运动可由性质一节中第二条获得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> norm</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStdBM</span>(<span class="params">N=<span class="number">1000</span>, B0=<span class="number">0</span></span>):</span></span><br><span class="line">    randn_array = np.random.randn(N)</span><br><span class="line">    <span class="keyword">return</span> np.array(<span class="built_in">list</span>(itertools.accumulate(randn_array, initial=B0)))</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    plt.plot(getStdBM())</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631179055/sto_bm.png" /></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;条件期望&quot;&gt;条件期望&lt;/h1&gt;
&lt;h2 id=&quot;定义&quot;&gt;1. 定义&lt;/h2&gt;
&lt;p&gt;简言之，条件期望是对随机变量&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;给定条件（随机变量）&lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt;时最好的猜测.记作&lt;span class=&quot;math inline&quot;&gt;\(E(Y|X)\)&lt;/span&gt;.显然，&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;本身也是随机变量.我们使用&lt;span class=&quot;math inline&quot;&gt;\(\mathbb{E}(Y)\)&lt;/span&gt;表示常规的期望.&lt;/p&gt;
&lt;p&gt;令域流&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{F}_n\)&lt;/span&gt;为随机变量&lt;span class=&quot;math inline&quot;&gt;\(X_1,\ldots,X_n\)&lt;/span&gt;中的信息，则&lt;span class=&quot;math inline&quot;&gt;\(E(Y\vert X_1,\ldots,X_n)=E({Y\vert \mathcal{F}_n})\)&lt;/span&gt;.当知道信息时，可以确认&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;的唯一值时，我们称&lt;span class=&quot;math inline&quot;&gt;\(E({Y\vert \mathcal{F}_n})\)&lt;/span&gt;为&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{F}_n\)&lt;/span&gt;可测的.当我们没有信息时，&lt;span class=&quot;math inline&quot;&gt;\(E(Y|\mathcal{F}_0)=\mathbb{E}(Y)\)&lt;/span&gt;.</summary>
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="随机分析" scheme="http://example.com/tags/%E9%9A%8F%E6%9C%BA%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>使用Python上传文件到Cloudinary的CDN服务</title>
    <link href="http://example.com/2020/05/30/cloudinary-on-python/"/>
    <id>http://example.com/2020/05/30/cloudinary-on-python/</id>
    <published>2020-05-30T09:21:16.000Z</published>
    <updated>2021-09-09T10:31:22.742Z</updated>
    
    <content type="html"><![CDATA[<p>以Python为例，使用Cloudinary提供的免费CDN服务上传文件： <span id="more"></span></p><h1 id="安装cloudinary">安装cloudinary</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cloudinary</span><br></pre></td></tr></table></figure><h1 id="加载modules">加载modules</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cloudinary</span><br><span class="line"><span class="keyword">import</span> cloudinary.uploader</span><br><span class="line"><span class="keyword">import</span> cloudinary.api</span><br></pre></td></tr></table></figure><h1 id="配置cloudinary">配置cloudinary</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cloudinary.config(</span><br><span class="line">  cloud_name = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  api_key = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  api_secret = <span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="上传文件">上传文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可也从本地上传</span></span><br><span class="line">cloudinary.uploader.upload(<span class="string">rf&quot;https://en.wikipedia.org/wiki/File:LagrangeMultipliers2D.svg&quot;</span>,</span><br><span class="line">  public_id = <span class="string">&quot;lm_wiki&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;以Python为例，使用Cloudinary提供的免费CDN服务上传文件：</summary>
    
    
    
    
  </entry>
  
</feed>
