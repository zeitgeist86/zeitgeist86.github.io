<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yihong&#39;s Whiteboard</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-09T14:38:26.841Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Yihong Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何使用Intel® oneAPI toolkit加速Visual Studio中的C++</title>
    <link href="http://example.com/2021/07/19/oneapi/"/>
    <id>http://example.com/2021/07/19/oneapi/</id>
    <published>2021-07-19T00:07:34.000Z</published>
    <updated>2021-09-09T14:38:26.841Z</updated>
    
    <content type="html"><![CDATA[<p>Intel® oneAPI toolkit提供了高性能计算的高级架构，让使用者可以自由使用加速工具而不用担心底层架构。例如，当我们想使用多线程加速蒙特卡洛模拟时，常常无法选出最佳的线程数与线程任务。Intel® oneAPI很好的解决了上述问题。本文描述如何在Windows操作系统的Visual Studio C++中使用Intel® oneAPI。</p><span id="more"></span><h1>1 下载工具包</h1><p>下载并按顺序安装Intel® oneAPI toolkit和Intel® oneAPI HPC toolkit，链接如下：<br><a href="https://software.intel.com/content/www/us/en/develop/tools/oneapi/all-toolkits.html#hpc-kit">https://software.intel.com/content/www/us/en/develop/tools/oneapi/all-toolkits.html#hpc-kit</a><br><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631197131/oneapidld.jpg" alt=""></p><h1>2 Visual Studio环境配置</h1><p>打开任意Visual Studio C++ project，在Property Pages中按照下图配置Intel Libraries for oneAPI，在Project -&gt; Inter Compiler中选择Classic（推荐）：<br><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631197444/oneapi_pic2.png" alt=""><br><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631197531/oneapi_pic3.jpg" alt=""><br>截至写作时最新intel C++ compiler classic version为19.2。<br><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631197574/oneapi_pic4.jpg" alt=""></p><h1>3 代码示例</h1><p>下面的例子使用蒙特卡洛法模拟圆周率$\pi$。我们使用mkl（math kernel library）和tbb（threading building blocks）两个library。<br>其中mkl可以加速数学浮点运算与向量化生成随机数，tbb负责智能化线程分配。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mkl_vsl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tbb/task_group.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PiTask</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">long</span> num_points;</span><br><span class="line"><span class="keyword">long</span>&amp; count_points_in_circle;</span><br><span class="line"></span><br><span class="line">    VSLStreamStatePtr stream;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PiTask</span>(<span class="keyword">long</span> numpoints, VSLStreamStatePtr stream, <span class="keyword">long</span>&amp; in)</span><br><span class="line">        : <span class="built_in">num_points</span>(numpoints), <span class="built_in">stream</span>(stream)</span><br><span class="line">        , <span class="built_in">count_points_in_circle</span>(in)</span><br><span class="line">    &#123;</span><br><span class="line">        count_points_in_circle = <span class="number">0</span>; <span class="comment">// make sure to initialize to zero.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span> <span class="comment">//has to be const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> block_size = <span class="number">1000</span>; <span class="comment">//to represent 1000 random points</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> rands[<span class="number">2</span> * block_size]; <span class="comment">//each point has 2 coordinates (x,y)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nblocks = num_points / block_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//nblocks</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nblocks; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vdRngUniform</span>(VSL_RNG_METHOD_UNIFORM_STD,</span><br><span class="line">                stream,</span><br><span class="line"><span class="number">2</span> * block_size,</span><br><span class="line">                rands,</span><br><span class="line"><span class="number">-1.0</span>, <span class="number">1.0</span>); <span class="comment">//range [-1,1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; block_size; i++)</span><br><span class="line">            &#123;</span><br><span class="line"><span class="keyword">double</span> x = rands[<span class="number">2</span> * i + <span class="number">0</span>];</span><br><span class="line"><span class="keyword">double</span> y = rands[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (x * x + y * y &lt;= <span class="number">1.0</span>) ++(count_points_in_circle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> errorcode;</span><br><span class="line"><span class="comment">//we devide 500 million simulations among 50 tasks</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> num_tasks = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> samples_per_task = <span class="number">10000000l</span>;</span><br><span class="line"><span class="keyword">int</span> seed = <span class="number">777</span>;</span><br><span class="line"></span><br><span class="line">    VSLStreamStatePtr stream[num_tasks];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_tasks; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        errorcode = <span class="built_in">vslNewStream</span>(&amp;stream[i], VSL_BRNG_MCG59, seed);</span><br><span class="line"><span class="keyword">if</span> (errorcode) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        errorcode = <span class="built_in">vslLeapfrogStream</span>(stream[i], i, num_tasks);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (errorcode) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tbb::task_group group;</span><br><span class="line"><span class="keyword">long</span> points_inside_circle_per_task[num_tasks];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_tasks; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        group.<span class="built_in">run</span>(<span class="built_in">PiTask</span>(samples_per_task,</span><br><span class="line">            stream[i],</span><br><span class="line">            points_inside_circle_per_task[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    group.<span class="built_in">wait</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> total_num_points_inside_circle = <span class="number">0ul</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_tasks; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        total_num_points_inside_circle += points_inside_circle_per_task[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> total_num_points = samples_per_task * num_tasks;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;pi = &quot;</span> &lt;&lt; <span class="number">4.0</span> * total_num_points_inside_circle / total_num_points &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_tasks; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vslDeleteStream</span>(&amp;stream[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>4 Hotstop Analysis</h1><p>Intel® oneAPI toolkit中的VTune Profiler可以进行hotspot analysis。可以直接打开VTune Profiler GUI进行分析：<br><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631198151/oneapi_pic5.jpg" alt=""><br>或者直接在Visual Studio中进行：<br><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631198254/oneapi_pic7.png" alt=""></p><h1>5. 报错解决</h1><p>某些步骤的报错可以通过reinstall/repair toolkit解决，暂时没有更好的解决方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Intel® oneAPI toolkit提供了高性能计算的高级架构，让使用者可以自由使用加速工具而不用担心底层架构。例如，当我们想使用多线程加速蒙特卡洛模拟时，常常无法选出最佳的线程数与线程任务。Intel® oneAPI很好的解决了上述问题。本文描述如何在Windows操作系统的Visual Studio C++中使用Intel® oneAPI。&lt;/p&gt;</summary>
    
    
    
    
    <category term="高性能运算" scheme="http://example.com/tags/%E9%AB%98%E6%80%A7%E8%83%BD%E8%BF%90%E7%AE%97/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="Intel® oneAPI toolkit" scheme="http://example.com/tags/Intel%C2%AE-oneAPI-toolkit/"/>
    
  </entry>
  
  <entry>
    <title>基于最新web协议的wechaty高并发机器人的环境配置与实现</title>
    <link href="http://example.com/2021/07/02/wechatbot/"/>
    <id>http://example.com/2021/07/02/wechatbot/</id>
    <published>2021-07-02T13:06:51.000Z</published>
    <updated>2021-09-09T14:04:40.928Z</updated>
    
    <content type="html"><![CDATA[<h1>1 开发目的</h1><p>在<code>wechaty-puppet-wechat</code>支持UOS微信桌面版协议登录后，我们可以重新使用基于web协议的免费WeChaty机器人。与其他机器人框架比较，<code>wechaty</code>会随微信桌面版本变化而更新。笔者在已有的高并发iPad协议机器人框架上更新依赖，成功启动桌面版微信机器人。</p><span id="more"></span><h1>2 Requirements</h1><p><code>wechaty &gt;= 0.4.1</code> and/or <code>docker &gt;= 20.10.6</code><br><br><code>node &gt;= 12.0</code><br><br><code>Python &gt;= 3.7</code></p><h1>3 环境配置</h1><h2 id="3-1-使用Docker配置wechaty">3.1 使用Docker配置wechaty</h2><p>Docker是官方唯一推荐的容器，在某个<code>Wechaty</code>版本后成为唯一指定的稳定版本。在安装好Docker之后，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull wechaty/wechaty</span><br></pre></td></tr></table></figure><p>需要确保TAG始终为latest。<br><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631194105/docker_wechaty.jpg" alt=""></p><h2 id="3-2-配置环境变量">3.2 配置环境变量</h2><p>在<code>wechaty/wechaty</code>根目录下配置。注意使用空端口，这里选择9222。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> WECHATY_LOG=<span class="string">&quot;verbose&quot;</span></span><br><span class="line"><span class="built_in">export</span> WECHATY_PUPPET=<span class="string">&quot;wechaty-puppet-padlocal&quot;</span></span><br><span class="line"><span class="built_in">export</span> WECHATY_PUPPET_PADLOCAL_TOKEN=<span class="string">&quot;puppet_padlocal_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"><span class="built_in">export</span> WECHATY_PUPPET_SERVER_PORT=<span class="string">&quot;9222&quot;</span></span><br><span class="line"><span class="built_in">export</span> WECHATY_TOKEN=<span class="string">&quot;puppet_padlocal_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">docker run -ti \</span><br><span class="line">  --name wechaty_puppet_service_token_gateway \</span><br><span class="line">  --rm \</span><br><span class="line">  -e WECHATY_LOG \</span><br><span class="line">  -e WECHATY_PUPPET \</span><br><span class="line">  -e WECHATY_PUPPET_PADLOCAL_TOKEN \</span><br><span class="line">  -e WECHATY_PUPPET_SERVER_PORT \</span><br><span class="line">  -e WECHATY_TOKEN \</span><br><span class="line">  -p <span class="string">&quot;<span class="variable">$WECHATY_PUPPET_SERVER_PORT</span>:<span class="variable">$WECHATY_PUPPET_SERVER_PORT</span>&quot;</span> \</span><br><span class="line">  wechaty/wechaty</span><br></pre></td></tr></table></figure><h2 id="3-3-配置Python环境变量">3.3 配置Python环境变量</h2><p>下载python-wechaty：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wechaty/python-wechaty.git my_path</span><br></pre></td></tr></table></figure><p>领取PadLocal token: <a href="http://pad-local.com/#/login">http://pad-local.com/#/login</a></p><p>若部署于外网服务器上，请跳过对<code>WECHATY_PUPPET_SERVICE_ENDPOINT</code>的配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.environ[<span class="string">&#x27;WECHATY_PUPPET_SERVICE_TOKEN&#x27;</span>] = <span class="string">&quot;puppet_padlocal_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">os.environ[<span class="string">&#x27;WECHATY_PUPPET_SERVICE_ENDPOINT&#x27;</span>] = <span class="string">&quot;127.0.0.1:9222&quot;</span></span><br><span class="line">os.environ[<span class="string">&#x27;WECHATY_PUPPET&#x27;</span>] = <span class="string">&quot;wechaty-puppet-service&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-4-使用AsyncIOScheduler实现异步">3.4 使用AsyncIOScheduler实现异步</h2><p>核心代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBot</span>(<span class="params">Wechaty</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">self, msg: Message</span>):</span> <span class="comment"># 请勿修改函数名on_message!!</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        do something when message is catched</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">on_login</span>(<span class="params">self, contact: Contact</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;user: <span class="subst">&#123;contact&#125;</span> has login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bot: <span class="type">Optional</span>[MyBot] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">bot: Wechaty</span>):</span> <span class="comment"># Send something to a chatroom</span></span><br><span class="line">    room = bot.Room.load(<span class="string">&#x27;chatroom ID&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> room.ready()</span><br><span class="line">    <span class="keyword">await</span> room.say(<span class="string">f&#x27;print time: <span class="subst">&#123;datetime.now()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> bot</span><br><span class="line">    bot = MyBot()</span><br><span class="line">    scheduler = AsyncIOScheduler()</span><br><span class="line">    scheduler.add_job(foo, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">0.1</span>, args=[bot])</span><br><span class="line">    scheduler.start()</span><br><span class="line">    <span class="keyword">await</span> bot.start()</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><h2 id="3-5-按实际需求加入多线程，继续测试并发性">3.5 按实际需求加入多线程，继续测试并发性</h2><p>我们选择在这里同时生成文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_execute</span>():</span></span><br><span class="line">    asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Random file generator</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_csv</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        t2 = pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;b&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;)</span><br><span class="line">        t2.to_csv(<span class="string">&#x27;t2.csv&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=main_execute)</span><br><span class="line">t2 = threading.Thread(target = generate_csv)</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure><h2 id="3-6-测试">3.6 测试</h2><p>以10秒为间隔测试respond，以5秒为间隔测试文件发送。机器人能获取到所有event并发出相应反馈。机器人的sender只能单线程处理任务，故计时器会在发送文档的间隙发送时间，即21:06:12+00:00:05*2+00:00:10≈21:06:33。<br><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631194124/wechaty1.png" alt=""><br>测试其他类型文件：<br><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631194128/wechaty2.png" alt=""></p><h1>4 基于最新web协议的机器人</h1><p>更新依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wechaty-puppet-wechat --save</span><br></pre></td></tr></table></figure><p>删除根目录下的<code>wechaty-puppet-wechat.memory-card.json</code>。</p><p>最后，类比3.2中的配置，更换<code>WECHATY_PUPPET</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> WECHATY_PUPPET=wechaty-puppet-wechat</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;1 开发目的&lt;/h1&gt;
&lt;p&gt;在&lt;code&gt;wechaty-puppet-wechat&lt;/code&gt;支持UOS微信桌面版协议登录后，我们可以重新使用基于web协议的免费WeChaty机器人。与其他机器人框架比较，&lt;code&gt;wechaty&lt;/code&gt;会随微信桌面版本变化而更新。笔者在已有的高并发iPad协议机器人框架上更新依赖，成功启动桌面版微信机器人。&lt;/p&gt;</summary>
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    <category term="微信机器人" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>随机分析笔记</title>
    <link href="http://example.com/2020/08/15/stochastic1/"/>
    <id>http://example.com/2020/08/15/stochastic1/</id>
    <published>2020-08-14T16:42:21.000Z</published>
    <updated>2020-12-03T12:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件期望">条件期望</h1><h2 id="定义">1. 定义</h2><p>简言之，条件期望是对随机变量<span class="math inline">\(Y\)</span>给定条件（随机变量）<span class="math inline">\(X\)</span>时最好的猜测.记作<span class="math inline">\(E(Y|X)\)</span>.显然，<span class="math inline">\(Y\)</span>本身也是随机变量.我们使用<span class="math inline">\(\mathbb{E}(Y)\)</span>表示常规的期望.</p><p>令域流<span class="math inline">\(\mathcal{F}_n\)</span>为随机变量<span class="math inline">\(X_1,\ldots,X_n\)</span>中的信息，则<span class="math inline">\(E(Y\vert X_1,\ldots,X_n)=E({Y\vert \mathcal{F}_n})\)</span>.当知道信息时，可以确认<span class="math inline">\(Y\)</span>的唯一值时，我们称<span class="math inline">\(E({Y\vert \mathcal{F}_n})\)</span>为<span class="math inline">\(\mathcal{F}_n\)</span>可测的.当我们没有信息时，<span class="math inline">\(E(Y|\mathcal{F}_0)=\mathbb{E}(Y)\)</span>. <span id="more"></span></p><h2 id="性质">2. 性质</h2><p>条件期望<span class="math inline">\(E({Y\vert \mathcal{F}_n})\)</span>具有如下性质：</p><ul><li>若<span class="math inline">\(Y\)</span>是<span class="math inline">\(\mathcal{F}_n\)</span>可测的，则<span class="math inline">\(E({Y\vert \mathcal{F}_n})=Y\)</span>.</li><li>若<span class="math inline">\(Y\)</span>独立于<span class="math inline">\(X_1,\ldots,X_n\)</span>，显然知道<span class="math inline">\(\{X_n\}\)</span>的信息无益于猜测<span class="math inline">\(Y\)</span>的值.即<span class="math inline">\(E({Y\vert \mathcal{F}_n})=\mathbb{E}(Y)\)</span>.</li><li><strong>Law of Iterated Expecations</strong>：<span class="math inline">\(\mathbb{E}(E({Y\vert \mathcal{F}_n}))=\mathbb{E}(Y)\)</span>；设想计算某年级学生成绩<span class="math inline">\(X\)</span>的平均分，可以加总所有成绩并除以人数，即<span class="math inline">\(\mathbb{E}(X)\)</span>，也可也按照班级或者性别等信息<span class="math inline">\(Y\)</span>先平均各班级内，再平均各班级.即<span class="math inline">\(\mathbb{E}(E(X\vert Y))\)</span>.显然两种方法得到的成绩平均分相等.</li><li>Linearity：<span class="math inline">\(E[aY+bZ\vert{\mathcal{F}_n}]=aE(Y|\mathcal{F}_n)+bE(Z|\mathcal{F}_n)\)</span>.常数<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span>可以扩展至任意<span class="math inline">\(\mathcal{F}_n\)</span>可测的随机变量.</li><li>Tower/Projection Property：若<span class="math inline">\(n&gt;m\)</span>，则<span class="math inline">\(E[E(Y|\mathcal{F}_n)\vert\mathcal{F}_m]=E[Y|\mathcal{F}_m]\)</span>.这条性质是Law of Iterated Expecations的推广：我们将原来的<span class="math inline">\(\mathcal{F}_0\)</span>推广至<span class="math inline">\(\mathcal{F}_m\)</span>.</li></ul><h1 id="鞅">鞅</h1><h2 id="定义-1">1. 定义</h2><p>一个随机变量序列<span class="math inline">\(M_0, M_1,\ldots\)</span>是一个关于域流<span class="math inline">\(\mathcal{F_n}\)</span>的鞅（Martingale），如果</p><ul><li><span class="math inline">\(\forall j, \mathbb{E}(|M_j|)&lt;\infty\)</span>；</li><li>鞅性：<span class="math inline">\(\forall{n&lt;m}, E(M_n|\mathcal{F}_m)=M_n\)</span>. 等价于<span class="math inline">\(E(M_{n+1}-M_n|\mathcal{F}_n)=0\)</span>.特别地，当<span class="math inline">\(E(M_{n+1}-M_n|\mathcal{F}_n)\geq 0\)</span>时，称为下鞅（submartingale），反之成为上鞅（supermartingale）.</li></ul><p><strong>概括一下，鞅认为对明天最好的猜测就是今天已知的值.</strong></p><h2 id="性质-1">2. 性质</h2><p>鞅可以被定义在离散的时间上，也可也定义在连续的时间上.</p><p>由于鞅性，我们认为鞅是"公平的游戏"（fair game）. <em>You cannot beat a fair game!</em></p><p>&lt;code style="color:white; background-color: #800000&gt;Example</code> <span class="math inline">\(x_1, x_2,\ldots\)</span> are i.i.d. r.v.s. <span class="math inline">\(\mathbb{E}(X_j)=0\)</span>. Let <span class="math inline">\(M_n=x_1+\ldots+x_n\)</span>, then <span class="math inline">\(M_n\)</span> is a martingale w.r.t. <span class="math inline">\(\mathcal{F}_n\)</span>.</p><h1 id="鞅与停时">鞅与停时</h1><h2 id="停时与公平的策略">1. 停时与公平的策略</h2><p>事实上，上文的“You cannot beat a fair game!”有更精确的表述：</p><blockquote><p><strong>You cannot beat a fair game with a fair strategy!</strong></p></blockquote><p>这里的“fair game”是鞅，而“fair strategy”指的是<strong>停时</strong>（stopping time）.</p><p>考虑如下游戏：</p><p><code style="color:white; background-color: #800000">Example</code> Martingale Betting Strategy</p><p>赌博n元，通过抛硬币的正反面决定输赢.若正面，赢n元，反之输n元.</p><p>显然这个游戏的收益是鞅，但我们仍然有稳赢的策略： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631179029/sto_gambler_ruin.png" /> 只要游戏一直进行下去，我们总能以<span class="math inline">\(+1\)</span>元的收益结束游戏.</p><p>我们似乎赢了一场公平的游戏，但唯一的问题是，我们用了不公平的策略.若游戏<strong>不能一直进行，显然我们不会一直赢得游戏</strong>.这便是“停时”不太精确的定义，也就是上文所述“公平”的策略.</p><h2 id="optional-stopping-theorem">2. Optional Stopping Theorem</h2><p>下面我们引出 <strong>(Doob's) Optional Sampling/Stopping Theorem</strong>：</p><p>若<span class="math inline">\(M_0,M_1,M_2,\ldots\)</span>是关于<span class="math inline">\(\mathcal{F}_0,\mathcal{F}_1,\mathcal{F}_2,\ldots\)</span> 的鞅，<span class="math inline">\(T\)</span>是停时，且令<span class="math inline">\(\tilde{M}_n:=M_{n\wedge{T}}:=M_{\min\{n,T\}}\)</span>，则<span class="math inline">\(\tilde{M_n}\)</span>是鞅，且<span class="math inline">\(\mathbb{E}(\tilde{M}_n)=\mathbb{E}(M_0)\)</span>.</p><h1 id="布朗运动">布朗运动</h1><h2 id="定义-2">1. 定义</h2><p>布朗运动（Brownian motion）可以被视为随机游走的“极限”，也就是连续的随机运动.用<span class="math inline">\(B_t\)</span>指代在时间<span class="math inline">\(t\)</span>时到达的位置.布朗运动在金融中也被称为维纳过程<span class="math inline">\(W_t\)</span>（Wiener process）.</p><p>带有<strong>漂移</strong>（drift）<span class="math inline">\(m\)</span>和<strong>波动</strong>（volatility）<span class="math inline">\(\sigma\)</span>的一维布朗运动被定义为： - <span class="math inline">\(B_0=0\)</span>. - <strong>Independent increments</strong>：若<span class="math inline">\(s&lt; t\)</span>，则<span class="math inline">\(B_t-B_s\)</span>独立于<span class="math inline">\(\{B_r:r\leq{s}\}\)</span>. - Stationary/<strong>Indentically distributed increments</strong>：若<span class="math inline">\(s&lt; t\)</span>，则<span class="math inline">\(B_t-B_s\)</span>与<span class="math inline">\(B_{t-s}-B_0\)</span>同分布. 该分布为<span class="math inline">\(B_t-B_s\sim{N(m(t-s),\sigma^2(t-s))}\)</span>. 特别的，当<span class="math inline">\(m=0, \sigma=1\)</span>时为标准布朗运动. - <strong>Continuity</strong>：<span class="math inline">\(B_t\)</span>是<span class="math inline">\(t\)</span>的连续函数.</p><h2 id="性质-2">2. 性质</h2><p>一维布朗运动有如下性质：</p><ul><li>矩：<span class="math inline">\(\mathbb{E}(B_t)=\mathbb{E}(B_s+B_t-B_s)=\mathbb{E}(B_s)+\mathbb{E}(B_{t-s}),\)</span> <span class="math inline">\(\text{Var}(B_t)=\text{Var}(B_s+B_t-B_s)=\text{Var}({B_s})+\text{Var}(B_{t-s}).\)</span><br> 特别地，若<span class="math inline">\(s\leq t\)</span>，对于<strong>协方差</strong>，我们有<br> <span class="math inline">\(\text{Cov}(B_s,B_t)=\mathbb{E}(B_sB_t)=\mathbb{E}(B_s(B_s+B_t-B_s))=s=s\wedge{t}\)</span><br></li><li>若<span class="math inline">\(B_t\)</span>是标准布朗运动，则<span class="math inline">\(Y_t=mt+\sigma{B_t}\)</span>为具有漂移<span class="math inline">\(m\)</span>和波动<span class="math inline">\(\sigma\)</span>的布朗运动.</li><li><strong>布朗运动处处不可导.</strong> 直觉地，对于普通<span class="math inline">\(C^1\)</span>连续性的函数而言，某点的导数取决于它的“过去”：<span class="math inline">\(f&#39;(x)=\frac{f(x)-f(\Delta x)}{\Delta x}\)</span>.然而，布朗运动的“过去”与“现在”独立，故布朗运动处处不可导，只有<span class="math inline">\(C^0\)</span>连续性.</li><li><strong>标准布朗运动是连续鞅.</strong></li><li>布朗运动是马尔可夫过程，也是高斯过程.</li><li>放缩（scaling）：若<span class="math inline">\(B_t\)</span>是一个标准布朗运动，令<span class="math inline">\(a&gt;0\)</span>，则<span class="math inline">\(Y_t=\frac{1}{\sqrt{a}}B_{at}\)</span>也是一个标准布朗运动.</li><li><strong>Strong Markov Property</strong>：若<span class="math inline">\(T\)</span>是停时且<span class="math inline">\(\mathbb{P}({T&lt; \infty})=1\)</span>（一定停）,则<span class="math inline">\(Y_t=B_{T+t}-B_T\)</span>是标准布朗运动，且<span class="math inline">\(Y\)</span>独立于<span class="math inline">\(\{B_t:0\leq{t}\leq{T}\}\)</span>.</li><li><strong>Reflection Property</strong>（反射原理）：</li></ul><p><span class="math display">\[\begin{aligned}    \mathbb{P}\left\{\text{布朗运动在时间}t\text{前抵达}a\right\}&amp;= \mathbb{P}\left\{\max_{0\leq s \leq t}B_s\geq a\right\} \\    &amp;= 2\left[1-\Phi\left(\frac{a}{\sqrt{t}}\right)\right]\end{aligned}\]</span></p><p><code style="color:white; background-color: #800000">Example</code> 证明反射定理：</p><p>Compute <span class="math inline">\(\mathbb{P}\left\{ {B_t\geq a}\right\}\)</span> first. This is the probability of exceeding <span class="math inline">\(a\)</span> at time <span class="math inline">\(t\)</span>.</p><p>We know that <span class="math inline">\(B_t\sim N(0,t)\)</span>，so <span class="math inline">\(\sqrt{t}B_1\sim N(0,t)\)</span>.</p><p>From the same distribution of <span class="math inline">\(N(0,t)\)</span>, we have</p><p><span class="math display">\[\begin{aligned}\mathbb{P}\left\{B_t\geq a\right\}&amp;= \mathbb{P}\left\{\sqrt{t}{B_1\geq a}\right\} \\                       &amp;= \mathbb{P}\left\{B_1\geq\frac{a}{\sqrt{t} }\right\} \\                       &amp;= 1-\Phi\left(\frac{a}{\sqrt{t} }\right).\end{aligned}\]</span></p><p>Using strong Markov property, we have <span class="math display">\[\mathbb{P}\left\{B_t\geq{a}\vert\max_{0\leq s\leq t}\right\}= \frac{1}{2}\]</span></p><p>Let <span class="math inline">\(T_a=\min\{s:B_s\geq a\}=\min\{s:B_s=a\}\)</span>, which is the first time BM reaches <span class="math inline">\(a\)</span>. The second equality holds because <span class="math inline">\(B_s\)</span> is continuous and <span class="math inline">\(B_0=0\)</span>.<br></p><p>The probability we want to calculate can then be paraphrase as <span class="math display">\[\mathbb{P}\left\{\max_{0\leq s \leq t}B_s\geq a\right\}=\mathbb{P}\left\{T_a\leq t\right\}=\mathbb{P}\left\{T_a&lt; t\right\}.\]</span></p><p>Obviously <span class="math inline">\(B_{T_a}=a\)</span>, then <span class="math display">\[\begin{aligned}\mathbb{P}\left\{B_t&gt; a\right\}&amp;=\mathbb{P}\left\{\max_{0\leq s \leq t}B_s\geq a, B_t&gt; a\right\}\\&amp;=\mathbb{P}\left\{T_a&lt; t, B_t&gt; B_{T_a}\right\}\\&amp;=\mathbb{P}\{T_a&lt; t\}\mathbb{P}\left\{B_t-B_{T_a}&gt; 0|T_a&lt; t\right\}.\end{aligned}\]</span> Using strong Markov property, we know that <span class="math inline">\(B_t-B_{T_a}\)</span> is also a standard Brownian motion. We denote the new Brownian motion as <span class="math inline">\(Y_t\)</span>.</p><p>Then</p><p><span class="math display">\[\mathbb{P}\left\{B_t-B_{T_a}&gt; 0|T_a&lt; t\right\}=\mathbb{P}\{Y_t&gt; 0\}=1-\Phi\left(\frac{0}{\sqrt{t}}\right)=\frac{1}{2}.\]</span> Plug the conditional probability back, we have <span class="math display">\[\mathbb{P}\{T_a&lt; t\}=\frac{\mathbb{P}\{B_t&gt; a\} }{\frac{1}{2} }=2\left[1-\Phi\left(\frac{a}{\sqrt{t} }\right)\right].\]</span></p><h2 id="用计算机生成布朗运动">3. 用计算机生成布朗运动</h2><p>标准布朗运动的计算机模拟如下，其他布朗运动可由性质一节中第二条获得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> norm</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStdBM</span>(<span class="params">N=<span class="number">1000</span>, B0=<span class="number">0</span></span>):</span></span><br><span class="line">    randn_array = np.random.randn(N)</span><br><span class="line">    <span class="keyword">return</span> np.array(<span class="built_in">list</span>(itertools.accumulate(randn_array, initial=B0)))</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    plt.plot(getStdBM())</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631179055/sto_bm.png" /></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;条件期望&quot;&gt;条件期望&lt;/h1&gt;
&lt;h2 id=&quot;定义&quot;&gt;1. 定义&lt;/h2&gt;
&lt;p&gt;简言之，条件期望是对随机变量&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;给定条件（随机变量）&lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt;时最好的猜测.记作&lt;span class=&quot;math inline&quot;&gt;\(E(Y|X)\)&lt;/span&gt;.显然，&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;本身也是随机变量.我们使用&lt;span class=&quot;math inline&quot;&gt;\(\mathbb{E}(Y)\)&lt;/span&gt;表示常规的期望.&lt;/p&gt;
&lt;p&gt;令域流&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{F}_n\)&lt;/span&gt;为随机变量&lt;span class=&quot;math inline&quot;&gt;\(X_1,\ldots,X_n\)&lt;/span&gt;中的信息，则&lt;span class=&quot;math inline&quot;&gt;\(E(Y\vert X_1,\ldots,X_n)=E({Y\vert \mathcal{F}_n})\)&lt;/span&gt;.当知道信息时，可以确认&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;的唯一值时，我们称&lt;span class=&quot;math inline&quot;&gt;\(E({Y\vert \mathcal{F}_n})\)&lt;/span&gt;为&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{F}_n\)&lt;/span&gt;可测的.当我们没有信息时，&lt;span class=&quot;math inline&quot;&gt;\(E(Y|\mathcal{F}_0)=\mathbb{E}(Y)\)&lt;/span&gt;.</summary>
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="随机分析" scheme="http://example.com/tags/%E9%9A%8F%E6%9C%BA%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>使用Python上传文件到Cloudinary的CDN服务</title>
    <link href="http://example.com/2020/05/30/cloudinary-on-python/"/>
    <id>http://example.com/2020/05/30/cloudinary-on-python/</id>
    <published>2020-05-30T09:21:16.000Z</published>
    <updated>2021-09-09T10:31:22.742Z</updated>
    
    <content type="html"><![CDATA[<p>以Python为例，使用Cloudinary提供的免费CDN服务上传文件： <span id="more"></span></p><h1 id="安装cloudinary">安装cloudinary</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cloudinary</span><br></pre></td></tr></table></figure><h1 id="加载modules">加载modules</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cloudinary</span><br><span class="line"><span class="keyword">import</span> cloudinary.uploader</span><br><span class="line"><span class="keyword">import</span> cloudinary.api</span><br></pre></td></tr></table></figure><h1 id="配置cloudinary">配置cloudinary</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cloudinary.config(</span><br><span class="line">  cloud_name = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  api_key = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  api_secret = <span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="上传文件">上传文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可也从本地上传</span></span><br><span class="line">cloudinary.uploader.upload(<span class="string">rf&quot;https://en.wikipedia.org/wiki/File:LagrangeMultipliers2D.svg&quot;</span>,</span><br><span class="line">  public_id = <span class="string">&quot;lm_wiki&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;以Python为例，使用Cloudinary提供的免费CDN服务上传文件：</summary>
    
    
    
    
  </entry>
  
</feed>
