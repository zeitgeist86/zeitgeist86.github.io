<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yihong&#39;s Whiteboard</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-01T09:40:41.730Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Yihong Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Notes on Multivariate Data Analysis via Matrix Decompositions</title>
    <link href="http://example.com/2021/09/30/multivar-data-note/"/>
    <id>http://example.com/2021/09/30/multivar-data-note/</id>
    <published>2021-09-30T12:30:07.000Z</published>
    <updated>2021-10-01T09:40:41.730Z</updated>
    
    <content type="html"><![CDATA[<p>This post is my notes on Multivariate Data Analysis via Matrix Decompositions, UChicago. The course is also known as <em>Unsupervised Learning</em> in machine learning.</p><span id="more"></span><h1 id="review-on-linear-algebra">1. Review on Linear Algebra</h1><h2 id="matrix-multiplication">1.1 Matrix Multiplication</h2><p>We denote matrix <span class="math inline">\(\b{A}=[a_{ij}]_{i,j=1}^{m,n}\in\mathbb{R}^{m\times{n}}\)</span>, where <span class="math display">\[\b{A}=            \begin{pmatrix}            a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\            a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\            \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\            a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn} \\            \end{pmatrix}.\]</span></p><p>We denote column vector <span class="math inline">\(\b{X}\in\mathbb{R}^n\)</span>, where <span class="math display">\[\b{X}=  \begin{pmatrix}  x_1\\  x_2\\  \vdots\\  x_n\\  \end{pmatrix}.\]</span></p><p>We always write a row vector as the transpose of a column vector, <span class="math inline">\(\b{X}&#39;=[x_1,x_2,\ldots,x_n]\)</span></p><p><span class="math display">\[\b{3}\]</span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This post is my notes on Multivariate Data Analysis via Matrix Decompositions, UChicago. The course is also known as &lt;em&gt;Unsupervised Learning&lt;/em&gt; in machine learning.&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="多元数据分析" scheme="http://example.com/tags/%E5%A4%9A%E5%85%83%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="无监督学习" scheme="http://example.com/tags/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Intel® oneAPI toolkit加速Visual Studio中的C++</title>
    <link href="http://example.com/2021/07/19/oneapi/"/>
    <id>http://example.com/2021/07/19/oneapi/</id>
    <published>2021-07-19T00:07:34.000Z</published>
    <updated>2021-09-27T08:14:38.805Z</updated>
    
    <content type="html"><![CDATA[<p>Intel® oneAPI toolkit提供了高性能计算的高级架构，让使用者可以自由使用加速工具而不用担心底层架构。例如，当我们想使用多线程加速蒙特卡洛模拟时，常常无法选出最佳的线程数与线程任务。Intel® oneAPI很好的解决了上述问题。本文描述如何在Windows操作系统的Visual Studio C++中使用Intel® oneAPI。</p><span id="more"></span><h1 id="下载工具包">1 下载工具包</h1><p>下载并按顺序安装Intel® oneAPI toolkit和Intel® oneAPI HPC toolkit，链接如下： <a href="https://software.intel.com/content/www/us/en/develop/tools/oneapi/all-toolkits.html#hpc-kit">https://software.intel.com/content/www/us/en/develop/tools/oneapi/all-toolkits.html#hpc-kit</a> <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631197131/oneapidld.jpg" /></p><h1 id="visual-studio环境配置">2 Visual Studio环境配置</h1><p>打开任意Visual Studio C++ project，在Property Pages中按照下图配置Intel Libraries for oneAPI，在Project -&gt; Inter Compiler中选择Classic（推荐）： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631197444/oneapi_pic2.png" /> <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631197531/oneapi_pic3.jpg" /> 截至写作时最新intel C++ compiler classic version为19.2。 <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631197574/oneapi_pic4.jpg" /></p><h1 id="代码示例">3 代码示例</h1><p>下面的例子使用蒙特卡洛法模拟圆周率<span class="math inline">\(\pi\)</span>。我们使用mkl（math kernel library）和tbb（threading building blocks）两个library。 其中mkl可以加速数学浮点运算与向量化生成随机数，tbb负责智能化线程分配。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mkl_vsl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tbb/task_group.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PiTask</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">long</span> num_points;</span><br><span class="line"><span class="keyword">long</span>&amp; count_points_in_circle;</span><br><span class="line"></span><br><span class="line">    VSLStreamStatePtr stream;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PiTask</span>(<span class="keyword">long</span> numpoints, VSLStreamStatePtr stream, <span class="keyword">long</span>&amp; in)</span><br><span class="line">        : <span class="built_in">num_points</span>(numpoints), <span class="built_in">stream</span>(stream)</span><br><span class="line">        , <span class="built_in">count_points_in_circle</span>(in)</span><br><span class="line">    &#123;</span><br><span class="line">        count_points_in_circle = <span class="number">0</span>; <span class="comment">// make sure to initialize to zero.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span> <span class="comment">//has to be const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> block_size = <span class="number">1000</span>; <span class="comment">//to represent 1000 random points</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> rands[<span class="number">2</span> * block_size]; <span class="comment">//each point has 2 coordinates (x,y)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nblocks = num_points / block_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//nblocks</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nblocks; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vdRngUniform</span>(VSL_RNG_METHOD_UNIFORM_STD,</span><br><span class="line">                stream,</span><br><span class="line"><span class="number">2</span> * block_size,</span><br><span class="line">                rands,</span><br><span class="line"><span class="number">-1.0</span>, <span class="number">1.0</span>); <span class="comment">//range [-1,1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; block_size; i++)</span><br><span class="line">            &#123;</span><br><span class="line"><span class="keyword">double</span> x = rands[<span class="number">2</span> * i + <span class="number">0</span>];</span><br><span class="line"><span class="keyword">double</span> y = rands[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (x * x + y * y &lt;= <span class="number">1.0</span>) ++(count_points_in_circle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> errorcode;</span><br><span class="line"><span class="comment">//we devide 500 million simulations among 50 tasks</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> num_tasks = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> samples_per_task = <span class="number">10000000l</span>;</span><br><span class="line"><span class="keyword">int</span> seed = <span class="number">777</span>;</span><br><span class="line"></span><br><span class="line">    VSLStreamStatePtr stream[num_tasks];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_tasks; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        errorcode = <span class="built_in">vslNewStream</span>(&amp;stream[i], VSL_BRNG_MCG59, seed);</span><br><span class="line"><span class="keyword">if</span> (errorcode) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        errorcode = <span class="built_in">vslLeapfrogStream</span>(stream[i], i, num_tasks);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (errorcode) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tbb::task_group group;</span><br><span class="line"><span class="keyword">long</span> points_inside_circle_per_task[num_tasks];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_tasks; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        group.<span class="built_in">run</span>(<span class="built_in">PiTask</span>(samples_per_task,</span><br><span class="line">            stream[i],</span><br><span class="line">            points_inside_circle_per_task[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    group.<span class="built_in">wait</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> total_num_points_inside_circle = <span class="number">0ul</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_tasks; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        total_num_points_inside_circle += points_inside_circle_per_task[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> total_num_points = samples_per_task * num_tasks;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;pi = &quot;</span> &lt;&lt; <span class="number">4.0</span> * total_num_points_inside_circle / total_num_points &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_tasks; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vslDeleteStream</span>(&amp;stream[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hotstop-analysis">4 Hotstop Analysis</h1><p>Intel® oneAPI toolkit中的VTune Profiler可以进行hotspot analysis。可以直接打开VTune Profiler GUI进行分析： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631198151/oneapi_pic5.jpg" /> 或者直接在Visual Studio中进行： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631198254/oneapi_pic7.png" /></p><h1 id="报错解决">5. 报错解决</h1><p>某些步骤的报错可以通过reinstall/repair toolkit解决，暂时没有更好的解决方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Intel® oneAPI toolkit提供了高性能计算的高级架构，让使用者可以自由使用加速工具而不用担心底层架构。例如，当我们想使用多线程加速蒙特卡洛模拟时，常常无法选出最佳的线程数与线程任务。Intel® oneAPI很好的解决了上述问题。本文描述如何在Windows操作系统的Visual Studio C++中使用Intel® oneAPI。&lt;/p&gt;</summary>
    
    
    
    
    <category term="高性能运算" scheme="http://example.com/tags/%E9%AB%98%E6%80%A7%E8%83%BD%E8%BF%90%E7%AE%97/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="Intel® oneAPI toolkit" scheme="http://example.com/tags/Intel%C2%AE-oneAPI-toolkit/"/>
    
  </entry>
  
  <entry>
    <title>基于最新web协议的wechaty高并发机器人的环境配置与实现</title>
    <link href="http://example.com/2021/07/02/wechatbot/"/>
    <id>http://example.com/2021/07/02/wechatbot/</id>
    <published>2021-07-02T13:06:51.000Z</published>
    <updated>2021-09-27T08:15:28.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发目的">1 开发目的</h1><p>在<code>wechaty-puppet-wechat</code>支持UOS微信桌面版协议登录后，我们可以重新使用基于web协议的免费WeChaty机器人。与其他机器人框架比较，<code>wechaty</code>会随微信桌面版本变化而更新。笔者在已有的高并发iPad协议机器人框架上更新依赖，成功启动桌面版微信机器人。</p><span id="more"></span><h1 id="requirements">2 Requirements</h1><p><code>wechaty &gt;= 0.4.1</code> and/or <code>docker &gt;= 20.10.6</code><br> <code>node &gt;= 12.0</code><br> <code>Python &gt;= 3.7</code></p><h1 id="环境配置">3 环境配置</h1><h2 id="使用docker配置wechaty">3.1 使用Docker配置wechaty</h2><p>Docker是官方唯一推荐的容器，在某个<code>Wechaty</code>版本后成为唯一指定的稳定版本。在安装好Docker之后，运行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull wechaty/wechaty</span><br></pre></td></tr></table></figure> 需要确保TAG始终为latest。 <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631194105/docker_wechaty.jpg" /></p><h2 id="配置环境变量">3.2 配置环境变量</h2><p>在<code>wechaty/wechaty</code>根目录下配置。注意使用空端口，这里选择9222。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> WECHATY_LOG=<span class="string">&quot;verbose&quot;</span></span><br><span class="line"><span class="built_in">export</span> WECHATY_PUPPET=<span class="string">&quot;wechaty-puppet-padlocal&quot;</span></span><br><span class="line"><span class="built_in">export</span> WECHATY_PUPPET_PADLOCAL_TOKEN=<span class="string">&quot;puppet_padlocal_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"><span class="built_in">export</span> WECHATY_PUPPET_SERVER_PORT=<span class="string">&quot;9222&quot;</span></span><br><span class="line"><span class="built_in">export</span> WECHATY_TOKEN=<span class="string">&quot;puppet_padlocal_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">docker run -ti \</span><br><span class="line">  --name wechaty_puppet_service_token_gateway \</span><br><span class="line">  --rm \</span><br><span class="line">  -e WECHATY_LOG \</span><br><span class="line">  -e WECHATY_PUPPET \</span><br><span class="line">  -e WECHATY_PUPPET_PADLOCAL_TOKEN \</span><br><span class="line">  -e WECHATY_PUPPET_SERVER_PORT \</span><br><span class="line">  -e WECHATY_TOKEN \</span><br><span class="line">  -p <span class="string">&quot;<span class="variable">$WECHATY_PUPPET_SERVER_PORT</span>:<span class="variable">$WECHATY_PUPPET_SERVER_PORT</span>&quot;</span> \</span><br><span class="line">  wechaty/wechaty</span><br></pre></td></tr></table></figure></p><h2 id="配置python环境变量">3.3 配置Python环境变量</h2><p>下载python-wechaty：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wechaty/python-wechaty.git my_path</span><br></pre></td></tr></table></figure><p>领取PadLocal token: <a href="http://pad-local.com/#/login">http://pad-local.com/#/login</a></p><p>若部署于外网服务器上，请跳过对<code>WECHATY_PUPPET_SERVICE_ENDPOINT</code>的配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.environ[<span class="string">&#x27;WECHATY_PUPPET_SERVICE_TOKEN&#x27;</span>] = <span class="string">&quot;puppet_padlocal_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">os.environ[<span class="string">&#x27;WECHATY_PUPPET_SERVICE_ENDPOINT&#x27;</span>] = <span class="string">&quot;127.0.0.1:9222&quot;</span></span><br><span class="line">os.environ[<span class="string">&#x27;WECHATY_PUPPET&#x27;</span>] = <span class="string">&quot;wechaty-puppet-service&quot;</span></span><br></pre></td></tr></table></figure><h2 id="使用asyncioscheduler实现异步">3.4 使用AsyncIOScheduler实现异步</h2><p>核心代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBot</span>(<span class="params">Wechaty</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">self, msg: Message</span>):</span> <span class="comment"># 请勿修改函数名on_message!!</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        do something when message is catched</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">on_login</span>(<span class="params">self, contact: Contact</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;user: <span class="subst">&#123;contact&#125;</span> has login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bot: <span class="type">Optional</span>[MyBot] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">bot: Wechaty</span>):</span> <span class="comment"># Send something to a chatroom</span></span><br><span class="line">    room = bot.Room.load(<span class="string">&#x27;chatroom ID&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> room.ready()</span><br><span class="line">    <span class="keyword">await</span> room.say(<span class="string">f&#x27;print time: <span class="subst">&#123;datetime.now()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> bot</span><br><span class="line">    bot = MyBot()</span><br><span class="line">    scheduler = AsyncIOScheduler()</span><br><span class="line">    scheduler.add_job(foo, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">0.1</span>, args=[bot])</span><br><span class="line">    scheduler.start()</span><br><span class="line">    <span class="keyword">await</span> bot.start()</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><h2 id="按实际需求加入多线程继续测试并发性">3.5 按实际需求加入多线程，继续测试并发性</h2><p>我们选择在这里同时生成文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_execute</span>():</span></span><br><span class="line">    asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Random file generator</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_csv</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        t2 = pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;b&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;)</span><br><span class="line">        t2.to_csv(<span class="string">&#x27;t2.csv&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=main_execute)</span><br><span class="line">t2 = threading.Thread(target = generate_csv)</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure><h2 id="测试">3.6 测试</h2><p>以10秒为间隔测试respond，以5秒为间隔测试文件发送。机器人能获取到所有event并发出相应反馈。机器人的sender只能单线程处理任务，故计时器会在发送文档的间隙发送时间，即21:06:12+00:00:05*2+00:00:10≈21:06:33。 <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631194124/wechaty1.png" /> 测试其他类型文件： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631194128/wechaty2.png" /></p><h1 id="基于最新web协议的机器人">4 基于最新web协议的机器人</h1><p>更新依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wechaty-puppet-wechat --save</span><br></pre></td></tr></table></figure><p>删除根目录下的<code>wechaty-puppet-wechat.memory-card.json</code>。</p><p>最后，类比3.2中的配置，更换<code>WECHATY_PUPPET</code>： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> WECHATY_PUPPET=wechaty-puppet-wechat</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;开发目的&quot;&gt;1 开发目的&lt;/h1&gt;
&lt;p&gt;在&lt;code&gt;wechaty-puppet-wechat&lt;/code&gt;支持UOS微信桌面版协议登录后，我们可以重新使用基于web协议的免费WeChaty机器人。与其他机器人框架比较，&lt;code&gt;wechaty&lt;/code&gt;会随微信桌面版本变化而更新。笔者在已有的高并发iPad协议机器人框架上更新依赖，成功启动桌面版微信机器人。&lt;/p&gt;</summary>
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    <category term="微信机器人" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Longstaff-Schwartz美式期权定价模型</title>
    <link href="http://example.com/2021/02/12/lsm/"/>
    <id>http://example.com/2021/02/12/lsm/</id>
    <published>2021-02-12T08:47:52.000Z</published>
    <updated>2021-09-30T10:31:23.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景">1. 背景</h1><p>在John Hull 1993版的金融衍生品一书中，Hull对蒙特卡洛法的美式期权定价有如下评论：</p><blockquote><p>"One limitation of the Monte Carlo simulation approach is that it can be used only for European-style derivative securities"</p></blockquote><p>在随后的版本中作者删除了这条陈述。不难理解Hull做出如上表述的理由：蒙特卡洛法本质上是一个<strong>forward algorithm</strong>（顺向算法），但美式期权由于需要比较行权的支付与不行权的支付期望，所以本质上通常是一个<strong>backward algorithm</strong>（逆向算法）。如果将通常的逆向算法应用于蒙特卡洛的单个模拟路径上，则得到未来价值来源于完美的事后预见，而非期望。Longstaff和Schwartz提出的模型有效解决了上述问题。</p><span id="more"></span><h1 id="使用bermudan近似american带来的定价思想">2. 使用Bermudan近似American带来的定价思想</h1><p>对于一个美式看跌期权，首先给出如下注释：</p><ul><li><span class="math inline">\([0,T]\)</span>：期限，同时定义行权时间<span class="math inline">\(t\in[0,T]\)</span></li><li><span class="math inline">\(X_t\)</span>：马尔科夫状态变量，这里为标的资产价格</li><li><span class="math inline">\(\left\{\mathcal{F}_t\right\}\)</span>：<span class="math inline">\(X_t\)</span>的域流<br></li><li><span class="math inline">\(Y_t:=e^{-rT}(K-X_t)\)</span>：<span class="math inline">\(t\)</span>时刻支付的折现。注意支付不一定为最优<span class="math inline">\((K-X_t)^+\)</span>，但是一定存在<span class="math inline">\(Y_T:=e^{-rT}(K-X_t)^+\)</span><br></li></ul><p>相较于美式期权，Bermudan（百慕大式）期权只能在有限行权次数中行权，但随着“有限次数”不断趋于无穷，可以近似等价于美式期权。即<span class="math inline">\(N\)</span>个行权时间： <span class="math display">\[0=t_0&lt;{t_1}&lt;\ldots&lt;{t_N}=T\]</span> 如此，Bermudan在<span class="math inline">\(t_0\)</span>的价格为 <span class="math display">\[\max_{\tau}\mathbb{E}Y_{\tau}\]</span> 其中<span class="math inline">\(\tau\)</span>为取决于<span class="math inline">\(\left\{\mathcal{F}_t\right\}\)</span>的随机行权时间。这里也暗示了<span class="math inline">\(\tau\)</span>应从一种non-anticipating（非预测的）的方式选取——依据<strong>现阶段</strong>已经获得的所有信息做出的选取。最优行权时间只能回溯地获得。<br></p><p>若在某可行行权时间<span class="math inline">\(t_n\)</span>之前都未行权，则存在<span class="math inline">\(\tau_n\in \{t_n,t_{n+1},\ldots,t_{N}\}\)</span>。我们可以给出严格的数学定义：<span class="math display">\[\tau_n:=t_n\mathbf{1}\left(Y_{t_n}\geq\mathbb{E}\left(Y_{\tau_{n+1}}\vert{X_{t_n}}\right)\right)+\tau_{n+1}\mathbf{1}\left(Y_{t_n}&lt;\mathbb{E}\left(Y_{\tau_{n+1}}\vert X_{t_n}\right)\right)\]</span> 换言之，我们需做出如下决策：给定现在的标的资产价格时，若<span class="math inline">\(t_n\)</span>时刻行权的折现支付大于等于在未来某时刻行权折现支付的条件期望，则我们在<span class="math inline">\(t_n\)</span>时刻行权。即 <span class="math display">\[\tau_n=\left\{\begin{array}{c} t_n,&amp; \text{if } Y_{t_n}\geq \mathbb{E}\left(Y_{\tau_{n+1}}\vert X_{t_n}\right)\\    \tau_{n+1},              &amp; \text{if } Y_{t_n}&lt; \mathbb{E}\left(Y_{\tau_{n+1}}\vert X_{t_n}\right)\end{array}\right.\]</span> 以上的关于<span class="math inline">\(\tau_n\)</span>的递归定义符合之前所述的逆向算法。同时，如何估计<span class="math inline">\(\mathbb{E}\left(Y_{\tau_{n+1}}\vert X_{t_n}\right)\)</span>十分关键。我们将该条件期望写作函数： <span class="math display">\[f_n(x):=\mathbb{E}\left(Y_{\tau_{n+1}}\vert X_{t_n}=x\right)\]</span></p><h1 id="longstaff-schwartz最小二乘的蒙特卡洛模拟">3. Longstaff-Schwartz：最小二乘的蒙特卡洛模拟</h1><p>Longstaff和Schwartz使用最小二乘法的思想给出了<span class="math inline">\(f_n(x)\)</span>的计算方法。首先模拟关于<span class="math inline">\(X\)</span>的<span class="math inline">\(M\)</span>条路径，每条路径应包括<span class="math inline">\(N\)</span>个节点以反应<span class="math inline">\(N\)</span>个可行权时间。</p><p>参照上文，定义<span class="math inline">\({\hat\tau}_N:=T\)</span>。在每一条路径<span class="math inline">\(m=1,\ldots,M\)</span>上，当给定 <span class="math inline">\({\hat\tau}_{n+1}^m\)</span>时，我们定义 <span class="math display">\[{\hat\tau}_{n}^m:=t_n\mathbf{1}\left(Y_{t_n}^m\geq\hat{f}_n(X^m_{t_n})\right)+\tau_{n+1}\mathbf{1}\left(Y_{t_n}^m&lt;\hat{f}_n(X^m_{t_n})\right)\]</span> 其中<span class="math inline">\(\hat{f}_n\)</span>是对连续值的最小二乘估计。特别的，如果已知<span class="math inline">\(f_n\)</span>恒非负，可以使用<span class="math inline">\(\hat{f}_n(X^m_{t_n})^+\)</span>替代<span class="math inline">\(\hat{f}_n(X^m_{t_n})\)</span>。</p><p>如此，我们得到0时刻的期权价格： <span class="math display">\[\hat{C}^{\text{LS}}_M:=\frac{1}{M}\sum_{m}Y^m_{\hat{\tau}_0^m}\]</span></p><h1 id="实例美式看跌期权的lsm定价">4. 实例：美式看跌期权的LSM定价</h1><p>下面，我们只需要估计<span class="math inline">\(\hat{f}_n\)</span>。</p><p>假设初始标的价格<span class="math inline">\(X_0=1\)</span>，行权价<span class="math inline">\(K=1.1\)</span>，无风险利率<span class="math inline">\(r_f=0.03\)</span>，标的波动率<span class="math inline">\(\sigma=0.20\)</span>，票期<span class="math inline">\(T=4\)</span>，路径模拟时间间隔<span class="math inline">\(dt=1\)</span>。假设标的服从几何布朗运动，我们首先模拟10条标的价格的路径：</p><p><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1632993952/lsm_01.bmp" /></p><p>之后，我们使用逆向算法的思维开始定价。首先从最后一个时间点<span class="math inline">\(t_4\)</span>开始，计算支付在<span class="math inline">\(t_4\)</span>的现值：<span class="math display">\[Y_4=(K-X_4)^+\]</span></p><p><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1632994084/lsm_02.bmp" /></p><p>例如，路径1在<span class="math inline">\(t_4\)</span>的支付为<span class="math inline">\((1.1-0.9757,0)^+=0.1243\)</span>。 回溯至<span class="math inline">\(t_3\)</span>，将上述支付折现获得<span class="math inline">\(Y_3\)</span>，如<span class="math inline">\(0.1206=0.1243\exp\{-1*0.03\}\)</span>： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1632994375/lsm_03.bmp" /></p><p>进行最小二乘估计，我们假设<span class="math inline">\(\hat{f}(X_3)=a_3(X_3)^2+b_3X_3+C_3\)</span>，即，当期支付关于模拟股价的二次回归： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1632994686/lsm_04.bmp" /> <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1632995114/lsm_05.bmp" /> 我们得到<span class="math inline">\(\hat{f}(X_3)=0.7825(X_3)^2-1.9349X_3+1.1781\)</span>，这代表已知<span class="math inline">\(t_3\)</span>的标的价格时，我们可以通过这个回归方程获得持有至<span class="math inline">\(t_4\)</span>时支付的期望。</p><p>将10条路径的<span class="math inline">\(X_3\)</span>带入回归方程，我们得到继续持有的支付期望，即estimated continuation value： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1632996244/lsm_06.bmp" /> 例如<span class="math inline">\(0.0817=0.7825*0.8795^2-1.9349*0.8795+1.1781\)</span>。</p><p>现在我们可以比较立刻行权的支付<span class="math inline">\(Y_3\)</span>和通过最小二乘估计的继续持有支付期望<span class="math inline">\(\hat{f}(X_3)\)</span>来确定是否应该行权，如果继续持有的支付期望小于立刻行权的支付，那么我们立刻行权： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1632996535/lsm_07.bmp" /></p><p>通过行权与否，写出<span class="math inline">\(t_3\)</span>获得的现金流：</p><p><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1632996844/lsm_08.bmp" /></p><p>现在，我们可以通过<span class="math inline">\(t_3\)</span>获得的现金流通过相同的办法遍历<span class="math inline">\(t_2\)</span>，同理通过<span class="math inline">\(t_1\)</span>获得的现金流遍历<span class="math inline">\(t_0\)</span>。我们将获得 <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1632997256/lsm_09.bmp" /></p><p>这里只需平均<span class="math inline">\(t_0\)</span>时刻的现金流并与行权支付<span class="math inline">\(1.1-1.0=0.1\)</span>相比较，就能获得<span class="math inline">\(t_0\)</span>时刻期权价格的期望，<span class="math inline">\(0.19\)</span>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;1. 背景&lt;/h1&gt;
&lt;p&gt;在John Hull 1993版的金融衍生品一书中，Hull对蒙特卡洛法的美式期权定价有如下评论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;One limitation of the Monte Carlo simulation approach is that it can be used only for European-style derivative securities&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在随后的版本中作者删除了这条陈述。不难理解Hull做出如上表述的理由：蒙特卡洛法本质上是一个&lt;strong&gt;forward algorithm&lt;/strong&gt;（顺向算法），但美式期权由于需要比较行权的支付与不行权的支付期望，所以本质上通常是一个&lt;strong&gt;backward algorithm&lt;/strong&gt;（逆向算法）。如果将通常的逆向算法应用于蒙特卡洛的单个模拟路径上，则得到未来价值来源于完美的事后预见，而非期望。Longstaff和Schwartz提出的模型有效解决了上述问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="期权定价" scheme="http://example.com/tags/%E6%9C%9F%E6%9D%83%E5%AE%9A%E4%BB%B7/"/>
    
    <category term="数值方法" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E6%96%B9%E6%B3%95/"/>
    
    <category term="LSM" scheme="http://example.com/tags/LSM/"/>
    
  </entry>
  
  <entry>
    <title>使用Python对Excel单元格截图</title>
    <link href="http://example.com/2020/09/30/excel-python-screenshot/"/>
    <id>http://example.com/2020/09/30/excel-python-screenshot/</id>
    <published>2020-09-29T23:11:02.000Z</published>
    <updated>2021-09-30T09:17:36.132Z</updated>
    
    <content type="html"><![CDATA[<p>本文讨论使用Python对Excel单元格截图的方法。</p><span id="more"></span><h1 id="安装excel2img">1. 安装excel2img</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install excel2img</span><br></pre></td></tr></table></figure><h1 id="截图">2. 截图</h1><p>输入参数：Excel文件路径，想要保存截图的路径，Excel sheet名、sheet中截图的区域。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">excel2img.export_img(<span class="string">&quot;spreadsheet_path.xlsx&quot;</span>, <span class="string">&quot;screenshot.bmp&quot;</span>, <span class="string">&quot;excel_sheet_name&quot;</span>, <span class="string">&quot;B14:G24&quot;</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文讨论使用Python对Excel单元格截图的方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Excel" scheme="http://example.com/tags/Excel/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="OA" scheme="http://example.com/tags/OA/"/>
    
  </entry>
  
  <entry>
    <title>随机分析笔记</title>
    <link href="http://example.com/2020/08/15/stochastic1/"/>
    <id>http://example.com/2020/08/15/stochastic1/</id>
    <published>2020-08-14T16:42:21.000Z</published>
    <updated>2020-12-03T12:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件期望">条件期望</h1><h2 id="定义">1. 定义</h2><p>简言之，条件期望是对随机变量<span class="math inline">\(Y\)</span>给定条件（随机变量）<span class="math inline">\(X\)</span>时最好的猜测.记作<span class="math inline">\(E(Y|X)\)</span>.显然，<span class="math inline">\(Y\)</span>本身也是随机变量.我们使用<span class="math inline">\(\mathbb{E}(Y)\)</span>表示常规的期望.</p><p>令域流<span class="math inline">\(\mathcal{F}_n\)</span>为随机变量<span class="math inline">\(X_1,\ldots,X_n\)</span>中的信息，则<span class="math inline">\(E(Y\vert X_1,\ldots,X_n)=E({Y\vert \mathcal{F}_n})\)</span>.当知道信息时，可以确认<span class="math inline">\(Y\)</span>的唯一值时，我们称<span class="math inline">\(E({Y\vert \mathcal{F}_n})\)</span>为<span class="math inline">\(\mathcal{F}_n\)</span>可测的.当我们没有信息时，<span class="math inline">\(E(Y|\mathcal{F}_0)=\mathbb{E}(Y)\)</span>.</p><span id="more"></span><h2 id="性质">2. 性质</h2><p>条件期望<span class="math inline">\(E({Y\vert \mathcal{F}_n})\)</span>具有如下性质：</p><ul><li>若<span class="math inline">\(Y\)</span>是<span class="math inline">\(\mathcal{F}_n\)</span>可测的，则<span class="math inline">\(E({Y\vert \mathcal{F}_n})=Y\)</span>.</li><li>若<span class="math inline">\(Y\)</span>独立于<span class="math inline">\(X_1,\ldots,X_n\)</span>，显然知道<span class="math inline">\(\{X_n\}\)</span>的信息无益于猜测<span class="math inline">\(Y\)</span>的值.即<span class="math inline">\(E({Y\vert \mathcal{F}_n})=\mathbb{E}(Y)\)</span>.</li><li><strong>Law of Iterated Expecations</strong>：<span class="math inline">\(\mathbb{E}(E({Y\vert \mathcal{F}_n}))=\mathbb{E}(Y)\)</span>；设想计算某年级学生成绩<span class="math inline">\(X\)</span>的平均分，可以加总所有成绩并除以人数，即<span class="math inline">\(\mathbb{E}(X)\)</span>，也可也按照班级或者性别等信息<span class="math inline">\(Y\)</span>先平均各班级内，再平均各班级.即<span class="math inline">\(\mathbb{E}(E(X\vert Y))\)</span>.显然两种方法得到的成绩平均分相等.</li><li>Linearity：<span class="math inline">\(E[aY+bZ\vert{\mathcal{F}_n}]=aE(Y|\mathcal{F}_n)+bE(Z|\mathcal{F}_n)\)</span>.常数<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span>可以扩展至任意<span class="math inline">\(\mathcal{F}_n\)</span>可测的随机变量.</li><li>Tower/Projection Property：若<span class="math inline">\(n&gt;m\)</span>，则<span class="math inline">\(E[E(Y|\mathcal{F}_n)\vert\mathcal{F}_m]=E[Y|\mathcal{F}_m]\)</span>.这条性质是Law of Iterated Expecations的推广：我们将原来的<span class="math inline">\(\mathcal{F}_0\)</span>推广至<span class="math inline">\(\mathcal{F}_m\)</span>.</li></ul><h1 id="鞅">鞅</h1><h2 id="定义-1">1. 定义</h2><p>一个随机变量序列<span class="math inline">\(M_0, M_1,\ldots\)</span>是一个关于域流<span class="math inline">\(\mathcal{F_n}\)</span>的鞅（Martingale），如果</p><ul><li><span class="math inline">\(\forall j, \mathbb{E}(|M_j|)&lt;\infty\)</span>；</li><li>鞅性：<span class="math inline">\(\forall{n&lt;m}, E(M_n|\mathcal{F}_m)=M_n\)</span>. 等价于<span class="math inline">\(E(M_{n+1}-M_n|\mathcal{F}_n)=0\)</span>.特别地，当<span class="math inline">\(E(M_{n+1}-M_n|\mathcal{F}_n)\geq 0\)</span>时，称为下鞅（submartingale），反之成为上鞅（supermartingale）.</li></ul><p><strong>概括一下，鞅认为对明天最好的猜测就是今天已知的值.</strong></p><h2 id="性质-1">2. 性质</h2><p>鞅可以被定义在离散的时间上，也可也定义在连续的时间上.</p><p>由于鞅性，我们认为鞅是"公平的游戏"（fair game）. <em>You cannot beat a fair game!</em></p><p>&lt;code style="color:white; background-color: #800000&gt;Example</code> <span class="math inline">\(x_1, x_2,\ldots\)</span> are i.i.d. r.v.s. <span class="math inline">\(\mathbb{E}(X_j)=0\)</span>. Let <span class="math inline">\(M_n=x_1+\ldots+x_n\)</span>, then <span class="math inline">\(M_n\)</span> is a martingale w.r.t. <span class="math inline">\(\mathcal{F}_n\)</span>.</p><h1 id="鞅与停时">鞅与停时</h1><h2 id="停时与公平的策略">1. 停时与公平的策略</h2><p>事实上，上文的“You cannot beat a fair game!”有更精确的表述：</p><blockquote><p><strong>You cannot beat a fair game with a fair strategy!</strong></p></blockquote><p>这里的“fair game”是鞅，而“fair strategy”指的是<strong>停时</strong>（stopping time）.</p><p>考虑如下游戏：</p><p><code style="color:white; background-color: #800000">Example</code> Martingale Betting Strategy</p><p>赌博n元，通过抛硬币的正反面决定输赢.若正面，赢n元，反之输n元.</p><p>显然这个游戏的收益是鞅，但我们仍然有稳赢的策略： <img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631179029/sto_gambler_ruin.png" /> 只要游戏一直进行下去，我们总能以<span class="math inline">\(+1\)</span>元的收益结束游戏.</p><p>我们似乎赢了一场公平的游戏，但唯一的问题是，我们用了不公平的策略.若游戏<strong>不能一直进行，显然我们不会一直赢得游戏</strong>.这便是“停时”不太精确的定义，也就是上文所述“公平”的策略.</p><h2 id="可选样本定理">2. 可选样本定理</h2><p>下面我们引出 <strong>(Doob's) Optional Sampling/Stopping Theorem</strong>：</p><p>若<span class="math inline">\(M_0,M_1,M_2,\ldots\)</span>是关于<span class="math inline">\(\mathcal{F}_0,\mathcal{F}_1,\mathcal{F}_2,\ldots\)</span> 的鞅，<span class="math inline">\(T\)</span>是停时，且令<span class="math inline">\(\tilde{M}_n:=M_{n\wedge{T}}:=M_{\min\{n,T\}}\)</span>，则<span class="math inline">\(\tilde{M_n}\)</span>是鞅，且<span class="math inline">\(\mathbb{E}(\tilde{M}_n)=\mathbb{E}(M_0)\)</span>.</p><h1 id="布朗运动">布朗运动</h1><h2 id="定义-2">1. 定义</h2><p>布朗运动（Brownian motion）可以被视为随机游走的“极限”，也就是连续的随机运动.用<span class="math inline">\(B_t\)</span>指代在时间<span class="math inline">\(t\)</span>时到达的位置.布朗运动在金融中也被称为维纳过程<span class="math inline">\(W_t\)</span>（Wiener process）.</p><p>带有<strong>漂移</strong>（drift）<span class="math inline">\(m\)</span>和<strong>波动</strong>（volatility）<span class="math inline">\(\sigma\)</span>的一维布朗运动被定义为： - <span class="math inline">\(B_0=0\)</span>. - <strong>Independent increments</strong>：若<span class="math inline">\(s&lt; t\)</span>，则<span class="math inline">\(B_t-B_s\)</span>独立于<span class="math inline">\(\{B_r:r\leq{s}\}\)</span>. - Stationary/<strong>Indentically distributed increments</strong>：若<span class="math inline">\(s&lt; t\)</span>，则<span class="math inline">\(B_t-B_s\)</span>与<span class="math inline">\(B_{t-s}-B_0\)</span>同分布. 该分布为<span class="math inline">\(B_t-B_s\sim{N(m(t-s),\sigma^2(t-s))}\)</span>. 特别的，当<span class="math inline">\(m=0, \sigma=1\)</span>时为标准布朗运动. - <strong>Continuity</strong>：<span class="math inline">\(B_t\)</span>是<span class="math inline">\(t\)</span>的连续函数.</p><h2 id="性质-2">2. 性质</h2><p>一维布朗运动有如下性质：</p><ul><li>矩：<span class="math inline">\(\mathbb{E}(B_t)=\mathbb{E}(B_s+B_t-B_s)=\mathbb{E}(B_s)+\mathbb{E}(B_{t-s}),\)</span> <span class="math inline">\(\text{Var}(B_t)=\text{Var}(B_s+B_t-B_s)=\text{Var}({B_s})+\text{Var}(B_{t-s}).\)</span><br> 特别地，若<span class="math inline">\(s\leq t\)</span>，对于<strong>协方差</strong>，我们有<br> <span class="math inline">\(\text{Cov}(B_s,B_t)=\mathbb{E}(B_sB_t)=\mathbb{E}(B_s(B_s+B_t-B_s))=s=s\wedge{t}\)</span><br></li><li>若<span class="math inline">\(B_t\)</span>是标准布朗运动，则<span class="math inline">\(Y_t=mt+\sigma{B_t}\)</span>为具有漂移<span class="math inline">\(m\)</span>和波动<span class="math inline">\(\sigma\)</span>的布朗运动.</li><li><strong>布朗运动处处不可导.</strong> 直觉地，对于普通<span class="math inline">\(C^1\)</span>连续性的函数而言，某点的导数取决于它的“过去”：<span class="math inline">\(f&#39;(x)=\frac{f(x)-f(\Delta x)}{\Delta x}\)</span>.然而，布朗运动的“过去”与“现在”独立，故布朗运动处处不可导，只有<span class="math inline">\(C^0\)</span>连续性.</li><li><strong>标准布朗运动是连续鞅.</strong></li><li>布朗运动是马尔可夫过程，也是高斯过程.</li><li>放缩（scaling）：若<span class="math inline">\(B_t\)</span>是一个标准布朗运动，令<span class="math inline">\(a&gt;0\)</span>，则<span class="math inline">\(Y_t=\frac{1}{\sqrt{a}}B_{at}\)</span>也是一个标准布朗运动.</li><li><strong>Strong Markov Property</strong>：若<span class="math inline">\(T\)</span>是停时且<span class="math inline">\(\mathbb{P}({T&lt; \infty})=1\)</span>（一定停）,则<span class="math inline">\(Y_t=B_{T+t}-B_T\)</span>是标准布朗运动，且<span class="math inline">\(Y\)</span>独立于<span class="math inline">\(\{B_t:0\leq{t}\leq{T}\}\)</span>.</li><li><strong>Reflection Property</strong>（反射原理）：</li></ul><p><span class="math display">\[\begin{aligned}    \mathbb{P}\left\{\text{布朗运动在时间}t\text{前抵达}a\right\}&amp;= \mathbb{P}\left\{\max_{0\leq s \leq t}B_s\geq a\right\} \\    &amp;= 2\left[1-\Phi\left(\frac{a}{\sqrt{t}}\right)\right]\end{aligned}\]</span></p><p><code style="color:white; background-color: #800000">Example</code> 证明反射定理：</p><p>Compute <span class="math inline">\(\mathbb{P}\left\{ {B_t\geq a}\right\}\)</span> first. This is the probability of exceeding <span class="math inline">\(a\)</span> at time <span class="math inline">\(t\)</span>.</p><p>We know that <span class="math inline">\(B_t\sim N(0,t)\)</span>，so <span class="math inline">\(\sqrt{t}B_1\sim N(0,t)\)</span>.</p><p>From the same distribution of <span class="math inline">\(N(0,t)\)</span>, we have</p><p><span class="math display">\[\begin{aligned}\mathbb{P}\left\{B_t\geq a\right\}&amp;= \mathbb{P}\left\{\sqrt{t}{B_1\geq a}\right\} \\                       &amp;= \mathbb{P}\left\{B_1\geq\frac{a}{\sqrt{t} }\right\} \\                       &amp;= 1-\Phi\left(\frac{a}{\sqrt{t} }\right).\end{aligned}\]</span></p><p>Using strong Markov property, we have <span class="math display">\[\mathbb{P}\left\{B_t\geq{a}\vert\max_{0\leq s\leq t}\right\}= \frac{1}{2}\]</span></p><p>Let <span class="math inline">\(T_a=\min\{s:B_s\geq a\}=\min\{s:B_s=a\}\)</span>, which is the first time BM reaches <span class="math inline">\(a\)</span>. The second equality holds because <span class="math inline">\(B_s\)</span> is continuous and <span class="math inline">\(B_0=0\)</span>.<br></p><p>The probability we want to calculate can then be paraphrase as <span class="math display">\[\mathbb{P}\left\{\max_{0\leq s \leq t}B_s\geq a\right\}=\mathbb{P}\left\{T_a\leq t\right\}=\mathbb{P}\left\{T_a&lt; t\right\}.\]</span></p><p>Obviously <span class="math inline">\(B_{T_a}=a\)</span>, then <span class="math display">\[\begin{aligned}\mathbb{P}\left\{B_t&gt; a\right\}&amp;=\mathbb{P}\left\{\max_{0\leq s \leq t}B_s\geq a, B_t&gt; a\right\}\\&amp;=\mathbb{P}\left\{T_a&lt; t, B_t&gt; B_{T_a}\right\}\\&amp;=\mathbb{P}\{T_a&lt; t\}\mathbb{P}\left\{B_t-B_{T_a}&gt; 0|T_a&lt; t\right\}.\end{aligned}\]</span> Using strong Markov property, we know that <span class="math inline">\(B_t-B_{T_a}\)</span> is also a standard Brownian motion. We denote the new Brownian motion as <span class="math inline">\(Y_t\)</span>.</p><p>Then</p><p><span class="math display">\[\mathbb{P}\left\{B_t-B_{T_a}&gt; 0|T_a&lt; t\right\}=\mathbb{P}\{Y_t&gt; 0\}=1-\Phi\left(\frac{0}{\sqrt{t}}\right)=\frac{1}{2}.\]</span> Plug the conditional probability back, we have <span class="math display">\[\mathbb{P}\{T_a&lt; t\}=\frac{\mathbb{P}\{B_t&gt; a\} }{\frac{1}{2} }=2\left[1-\Phi\left(\frac{a}{\sqrt{t} }\right)\right].\]</span></p><h2 id="布朗运动的模拟">3. 布朗运动的模拟</h2><p>标准布朗运动的计算机模拟如下，其他布朗运动可由性质一节中第二条获得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> norm</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStdBM</span>(<span class="params">N=<span class="number">1000</span>, B0=<span class="number">0</span></span>):</span></span><br><span class="line">    randn_array = np.random.randn(N)</span><br><span class="line">    <span class="keyword">return</span> np.array(<span class="built_in">list</span>(itertools.accumulate(randn_array, initial=B0)))</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    plt.plot(getStdBM())</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddiv6l5im/image/upload/v1631179055/sto_bm.png" /></p><p>我们在模拟中使用了<span class="math inline">\(\Delta{x}=\sqrt{\Delta{t}}\)</span>，其中<span class="math inline">\(\Delta{x}\)</span>为布朗运动的增量，<span class="math inline">\(\Delta{t}\)</span>为时间的增量.在第四节中我们将对这一结论给出严格证明.</p><h2 id="二阶变差">4. 二阶变差</h2><p>考虑一个标准布朗运动<span class="math inline">\(B_t\)</span>，将时间等分为间隔为<span class="math inline">\(\frac{1}{n}\)</span>的区间<span class="math inline">\(B_{\frac{1}{n}},B_{\frac{2}{n}},\ldots,B_{\frac{n-1}{n}},1\)</span>.</p><p>定义<span class="math inline">\(Y_{1,n},\ldots,Y_{n,n}\)</span>为独立增量的平方： <span class="math display">\[Y_{j,n}=\left(B_{\frac{1}{n}}\right)^2\]</span></p><p>则<span class="math inline">\(Y_{j,n}\)</span>与<span class="math inline">\(\left(B_{\frac{1}{n}}\right)^2\)</span>同分布.又因为<span class="math inline">\(\left(B_{\frac{1}{n}}\right)^2\)</span>与<span class="math inline">\(\left(\frac{1}{\sqrt{n}}B_1\right)^2\)</span>同分布，故 <span class="math display">\[Y_{j,n}=\left(\frac{1}{\sqrt{n}}B_1\right)^2\]</span></p><p>定义<span class="math inline">\(Q_n\)</span>为 <span class="math display">\[Q_n=\sum_{j=1}^n \left[B_{\frac{j}{n}}-B_{\frac{j-1}{n}}\right]^2=\sum_{j=1}^n Y_{j,n}.\]</span></p><p>下面计算<span class="math inline">\(Q_n\)</span>的<strong>期望</strong>： <span class="math display">\[\begin{aligned}\mathbb{E}(Q_n)&amp;=\mathbb{E}(\sum_{j=1}^n Y_{j,n})\\&amp;=\sum_{j=1}^n \mathbb{E}\left[\left(\frac{1}{\sqrt{n}}B_1\right)^2\right]\\&amp;=\frac{1}{n}\sum_{j=1}^n\mathbb{E}(B_1^2)\\&amp;=\frac{1}{n}\cdot{n}\cdot{1}\\&amp;=1\end{aligned}\]</span> 计算<span class="math inline">\(Q_n\)</span>的<strong>方差</strong>，先计算<span class="math inline">\(\text{Var}(Y_{j,n})\)</span>：</p><p><span class="math display">\[\begin{aligned}\text{Var}(Y_{j,n})&amp;=\mathbb{E}(Y_{j,n}^2)-\left[\mathbb{E}(Y_{j,n})\right]^2\\&amp;=\mathbb{E}\left[\left(\left(\frac{1}{\sqrt{n}}B_1\right)^2\right)^2\right]-\left[\mathbb{E}\left(\frac{1}{\sqrt{n}}B_1\right)^2\right]^2\\&amp;=\frac{1}{n^2}\mathbb{E}(B_1^4)-\frac{1}{n^2}[\mathbb{E}(B_1^2)]^2\\&amp;=\frac{1}{n^2}\cdot{3}-\frac{1}{n^2}\\&amp;=\frac{2}{n^2}\end{aligned}\]</span></p><p>由于<span class="math inline">\(Y_{j,n}\)</span>互相独立，根据方差的独立可加性： <span class="math display">\[\begin{aligned}\text{Var}(Q_n)&amp;=\sum_{j=1}^n\text{Var}(Y_{j,n})\\&amp;=n\cdot\frac{2}{n^2}\\&amp;=\frac{2}{n}\end{aligned}\]</span></p><p>随着<span class="math inline">\(n\to\infty\)</span>，<span class="math inline">\(\mathbb{E}(Q_n)=1\)</span>，<span class="math inline">\(\text{Var}(Q_n)=0\)</span>.</p><p>现在可以定义过程<span class="math inline">\(X_t\)</span>的二阶变差（quadratic variation）</p><p><span class="math display">\[\left\langle X\right\rangle_t:=\lim_{n\to\infty}\sum_{j\leq{tn}}\left[X_{\frac{j}{n}}-X_{\frac{j-1}{n}}\right]^2\]</span></p><p>上面的结论说明标准布朗运动的二阶变差是一个常过程：变差期望为常数，变差方差为<span class="math inline">\(0\)</span>.即<span class="math inline">\(\langle{B}\rangle_t=t\)</span>.</p><p>到此，我们给出了标准布朗运动<span class="math inline">\((\Delta{x})^2=\Delta{t}\)</span>性质的证明.</p><p>容易验证对于一般的布朗运动<span style="color:blue"><span class="math inline">\(Y_t=mt+\sigma B_t\)</span>，<span class="math inline">\(\langle{Y}\rangle_t=\sigma^2t\)</span>.</span> 这说明了布朗运动一条重要的性质：布朗运动的二阶变差并非随机过程，并且只依赖于过程的方差<span class="math inline">\(\sigma^2\)</span>.</p><h2 id="热方程">5. 热方程</h2><p>定义<span class="math inline">\(P_t(x)\)</span>为标准布朗运动在<span class="math inline">\(t\)</span>时刻的概率密度函数.根据定义，我们有 <span class="math display">\[P_t(x)=\frac{1}{\sqrt{2\pi{t}}}e^{-\frac{x^2}{2t}}.\]</span></p><p>根据二叉树的近似，我们有<span class="math inline">\(P_{t+\Delta{t}}(x)=\frac{1}{2}P_t(x-\Delta{x})+\frac{1}{2}P_t(x+\Delta{x})\)</span>. 所以<span class="math inline">\(P_t(x)\)</span>关于<span class="math inline">\(t\)</span>的偏导数可以写成 <span class="math display">\[\partial_t{P_t}(x)=\frac{P_{t+\Delta{t}}(x)-P_t(x)}{\Delta{t}}=\frac{P_t(x+\Delta{x})+P_t(x-\Delta{x})-2P_t(x)}{2(\Delta{x})^2}\]</span></p><p>令<span class="math inline">\(f(x)=P_t(x)\)</span>.根据泰勒级数展开，我们有 <span class="math display">\[\begin{aligned}f(x+\epsilon)=f(x)+f&#39;(x)\epsilon+\frac{1}{2}f&#39;&#39;(x)\epsilon^2+o(\epsilon^2)\\f(x-\epsilon)=f(x)-f&#39;(x)\epsilon+\frac{1}{2}f&#39;&#39;(x)\epsilon^2+o(\epsilon^2)\\\end{aligned}\]</span> 且 <span class="math display">\[f(x+\epsilon)+f(x-\epsilon)-2f(x)=f&#39;&#39;(x)\epsilon^2+o(\epsilon^2)=\partial_{xx}P_t(x).\]</span></p><p>所以<span class="math inline">\(\frac{P_t(x+\Delta{x})+P_t(x-\Delta{x})-2P_t(x)}{2(\Delta{x})^2}=\partial_{xx}P_t(x)\)</span>， 即<span class="math display">\[\partial_t P_t(x)=\frac{1}{2}\partial{xx}P_t(x).\]</span></p><p>上式可扩展至任意方差$^2.</p><p>当漂移<span class="math inline">\(m\neq 0\)</span>，<span class="math inline">\(\sigma^2=0\)</span>，我们有如下关系 <span class="math display">\[P_{t+\Delta{t}}(x)=P_t(x-m\Delta{t})\]</span></p><p>且 <span class="math display">\[-m\partial_xP_t(x)=m\cdot\frac{P_t(x-m\Delta{t})-P_t(x)}{m\Delta{t}}\]</span></p><p>综上，若<span class="math inline">\(B_t\)</span>是带有漂移<span class="math inline">\(m\)</span>和方差<span class="math inline">\(\sigma^2\)</span>的布朗运动，则概率密度函数满足 <span class="math display">\[\partial_tP_t(x)=-m\partial_xP_t(x)+\frac{\sigma^2}{2}\partial_{xx}P_t(x).\]</span></p><p>为了简化书写，我们定义<span class="math inline">\(P_t(y,x)\)</span>为从<span class="math inline">\(x\)</span>处开始的布朗运动在时间<span class="math inline">\(t\)</span>时到达<span class="math inline">\(y\)</span>的概率.同时定义对函数<span class="math inline">\(f(x)\)</span>操作的运算符<span class="math inline">\(L^*\)</span>： <span class="math display">\[L^*f(x)=-mf&#39;(x)+\frac{\sigma^2}{2}f&#39;&#39;(x)\]</span></p><p>则上述等式可以写作 <span class="math display">\[\partial_tP_t(x,y)=L^*_yP_t(x,y)\]</span></p><p><span class="math inline">\(L^*\)</span>运算符里的负号可以通过如下方法消除：根据对称性，当漂移<span class="math inline">\(m=0\)</span>时，<span class="math inline">\(P_t(x,y)=P_t(y,x)\)</span>.当<span class="math inline">\(m\)</span>为任意实数时，拥有漂移<span class="math inline">\(m\)</span>的过程的逆转过程是拥有漂移<span class="math inline">\(-m\)</span>的过程.故我们有<span class="math inline">\(P_t(x,y)-m=P_t(y,x)\)</span>.</p><p>现在定义运算符<span class="math inline">\(L\)</span>：<span class="math inline">\(Lf(x)=mf&#39;(x)+\frac{\sigma^2}{2}f&#39;&#39;(x)\)</span> 则<span style="color:blue"><span class="math display">\[\partial_tP_t(x,y)=L_xP_t(x,y).\]</span></span></p><p><span class="math inline">\(L\)</span>运算符比<span class="math inline">\(L^*\)</span>常用许多.</p><h2 id="期权支付的期望">6. 期权支付的期望</h2><p>现在讨论期权未来的期望.假设期权到期日（停时）为<span class="math inline">\(T\)</span>，资产价格在<span class="math inline">\(t\)</span>时刻（<span class="math inline">\(t&lt;T\)</span>）为布朗运动<span class="math inline">\(B_t\)</span>. 假设以上述资产为标的的期权的支付为<span class="math inline">\(F(x)\)</span>.则未来支付的期望被定义为</p><p><span class="math display">\[\phi(t,x)=E[F(B_t)\vert{B_0=x}]=\int_{-\infty}^{+\infty}F(y)P_t(x,y)dy\]</span></p><p>对上式中时间<span class="math inline">\(t\)</span>求偏导： <span class="math display">\[\partial_t\phi(t,x)=L_x\int_{-\infty}^{+\infty}F(y)P_t(x,y)dy=L_x\phi(t,x)\]</span></p><p>所以，关于未来支付的期望，我们有：<span class="math inline">\(\partial_t\phi(t,x)=L_x\phi(t,x)\)</span>，初值条件为<span class="math inline">\(\phi(0,x)=F(x)\)</span>.</p><h1 id="随机积分">随机积分</h1><h2 id="定义-3">1. 定义</h2><p>一个随机过程，如布朗运动<span class="math inline">\(X_t\)</span>，其微分形式，即过程的增量变化，可以写为 <span class="math display">\[dX_t=m(t,X_t)dt+\sigma(t,X_t)dB_t\]</span></p><p>这是随机微分方程（stochastic differential equation/SDE）的一个例子，我们称之为伊藤过程.在传统的黎曼积分中，我们只有<span class="math inline">\(dt\)</span>项，但在加入随机项<span class="math inline">\(dB_t\)</span>之后，SDE的复杂性随之而来.</p><p>如果<span class="math inline">\(X_t\)</span>满足以下表达式，我们认为<span class="math inline">\(X_t\)</span>是上述SDE的解： <span class="math display">\[X_t=X_0+\int_0^t m(s,X_s)ds+\int_0^t \sigma(s,X_s)dB_s\]</span></p><p>我们主要研究随机项带来的影响.更一般的，我们有 <span class="math display">\[\int_0^t A_sdB_s\]</span></p><p>我们也称上述关于布朗运动<span class="math inline">\(B_t\)</span>的随机积分为伊藤积分（Itô integral）.</p><h2 id="伊藤积分">2. 伊藤积分</h2><p>类比黎曼积分<span class="math inline">\(\int_a^bf(x)dx=\sum_jf(x_{j-1})(x_j-x_{j-1})\)</span>，我们可以用类似的离散化过程定义随即积分.</p><p>首先给出适应的定义.如果对于任意<span class="math inline">\(t\)</span>，<span class="math inline">\(A_t\)</span>是<span class="math inline">\(\mathcal{F_t}\)</span>可测的，我们就认为过程<span class="math inline">\(A_t\)</span>适应（adapted）于域流<span class="math inline">\(\{\mathcal{F_t}\}\)</span>.</p><p>若<span class="math inline">\(A_t\)</span>是一个连续且适应的过程，那么随即积分<span class="math inline">\(Z_t=\int_0^tA_sdB_s\)</span>存在，并满足下面四条性质：</p><ul><li>Linearty：对于过程<span class="math inline">\(A_t\)</span>和<span class="math inline">\(C_t\)</span>，存在<span class="math inline">\(\int_0^t(aA_s+bC_s)dB_s=a\int_0^tA_sdB_s+b\int_0^tC_sdB_s\)</span></li><li>Martingale：<span class="math inline">\(Z_t\)</span>是关于<span class="math inline">\(\{\mathcal{F}_t\}\)</span>的鞅，且<span class="math inline">\(Z_0=\mathbb{E}(Z_t)=0\)</span></li><li>Variance rule/Itô isometry（伊藤等距）：<span class="math inline">\(\text{Var}(Z_t)=\mathbb{E}(Z_t^2)=\mathbb{E}\left[\left(\int_0^tA_sdB_s\right)^2\right]=\int_0^t\mathbb{E}(A_s^2)ds\)</span></li><li>Continuity：<span class="math inline">\(Z_t\)</span>是关于<span class="math inline">\(t\)</span>的连续函数</li></ul><p><code style="color:white; background-color: #800000">Example</code> 证明伊藤等距</p><p>假设<span class="math inline">\(A_t\)</span>在离散化后取值为<span class="math inline">\(Y_t\)</span>，则我们有<span class="math inline">\(Z_t=\sum_{i=0}^{j-1}Y_i[B_{t_{i+1}}-B_{t_i}]\)</span>.所以</p><p><span class="math display">\[\begin{aligned}  \mathbb{E}[Z^2_t]&amp;=\mathbb{E}\left(\sum_{i=0}^{j-1}Y_i(B_{t_{i+1}}-B_{t_i})\right)^2\\  &amp;=\sum_{i=0}^{j-1}\mathbb{E}[Y_i^2(B_{t_{i+1}}-B_{t_i})^2]+\sum_{i\neq{k}}\mathbb{E}[Y_i(B_{t_{i+1}}-B_{t_i})Y_k(B_{t_{k+1}}-B_{t_k})]\end{aligned}\]</span> 假设<span class="math inline">\(i&lt;k\)</span>，我们有 <span class="math display">\[\begin{aligned}  \mathbb{E}[Y_i(B_{t_{i+1}}-B_{t_i})Y_k(B_{t_{k+1}}-B_{t_k})]&amp;=\mathbb{E}[E(Y_i(B_{t_{i+1}}-B_{t_i})Y_k(B_{t_{k+1}}-B_{t_k})|\mathcal{F}_{t_k})]\\  &amp;=\mathbb{E}(Y_i(B_{t_{i+1}}-B_{t_i})Y_kE(B_{t_{k+1}}-B_{t_k}|\mathcal{F}_{t_k}))\end{aligned}\]</span> 注意到<span class="math inline">\(E(B_{t_{k+1}}-B_{t_k}|\mathcal{F}_{t_k})=0\)</span>，故上式为<span class="math inline">\(0\)</span>. 因此，<span class="math inline">\(\mathbb{E}(Z^2_t)=\sum_{i=0}^{j-1}\mathbb{E}[Y^2_i(B_{t_{t+1}}-B_{t_i})^2]\)</span> 其中</p><p><span class="math display">\[\begin{aligned}  \mathbb{E}[Y^2_i(B_{t_{t+1}}-B_{t_i})^2]&amp;=\mathbb{E}[E[Y^2_i(B_{t_{i+1}}-B_{t_i})^2|\mathcal{F}_{t_i}]]\\  &amp;=\mathbb{E}[Y^2_iE[(B_{t_{i+1}}-B_{t_i})^2|\mathcal{F_{t_i}}]]\end{aligned}\]</span> 注意到<span class="math inline">\(E[(B_{t_{i+1}}-B_{t_i})^2|\mathcal{F_{t_i}}]=\text{Var}(B_{t_{i+1}}-B_{t_i})=t_{i+1}-t{i}\)</span>，</p><p>故<span class="math inline">\(\mathbb{E}(Z^2_t)=\sum_{i=0}^{j-1}\mathbb{E}(Y^2_i)[t_{i+1}-t{i}]=\int_0^{t}\mathbb{E}(A^2_s)ds.\quad\blacksquare\)</span></p><h2 id="伊藤定理">3. 伊藤定理</h2><p>对于正常的变量<span class="math inline">\(s\)</span>，基本的微积分知识告诉我们<span class="math inline">\(df(s)=f&#39;(s)ds\)</span>.我们想知道对于一个随机变量<span class="math inline">\(X\)</span>，上述表达式是否仍成立.</p><p>考虑上述随机变量<span class="math inline">\(x\)</span>为伊藤过程：<span class="math inline">\(dX_t=\mu_tdt+\sigma_tdW_t\)</span>，我们想表达出<span class="math inline">\(df(X_t)\)</span>或<span class="math inline">\(df(X_t,t)\)</span>，伊藤定理可以帮助我们描述上面的关系.</p><p>伊藤定理</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;条件期望&quot;&gt;条件期望&lt;/h1&gt;
&lt;h2 id=&quot;定义&quot;&gt;1. 定义&lt;/h2&gt;
&lt;p&gt;简言之，条件期望是对随机变量&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;给定条件（随机变量）&lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt;时最好的猜测.记作&lt;span class=&quot;math inline&quot;&gt;\(E(Y|X)\)&lt;/span&gt;.显然，&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;本身也是随机变量.我们使用&lt;span class=&quot;math inline&quot;&gt;\(\mathbb{E}(Y)\)&lt;/span&gt;表示常规的期望.&lt;/p&gt;
&lt;p&gt;令域流&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{F}_n\)&lt;/span&gt;为随机变量&lt;span class=&quot;math inline&quot;&gt;\(X_1,\ldots,X_n\)&lt;/span&gt;中的信息，则&lt;span class=&quot;math inline&quot;&gt;\(E(Y\vert X_1,\ldots,X_n)=E({Y\vert \mathcal{F}_n})\)&lt;/span&gt;.当知道信息时，可以确认&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;的唯一值时，我们称&lt;span class=&quot;math inline&quot;&gt;\(E({Y\vert \mathcal{F}_n})\)&lt;/span&gt;为&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{F}_n\)&lt;/span&gt;可测的.当我们没有信息时，&lt;span class=&quot;math inline&quot;&gt;\(E(Y|\mathcal{F}_0)=\mathbb{E}(Y)\)&lt;/span&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="随机分析" scheme="http://example.com/tags/%E9%9A%8F%E6%9C%BA%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用、报错、解决办法</title>
    <link href="http://example.com/2020/07/27/hexo-usage/"/>
    <id>http://example.com/2020/07/27/hexo-usage/</id>
    <published>2020-07-26T16:46:14.000Z</published>
    <updated>2021-10-01T12:16:19.968Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客汇总了一些笔者遇到的Hexo使用方法、报错及解决方法。</p><span id="more"></span><h1 id="使用">1. 使用</h1><h2 id="next主题下使用mathjax">1.1 NexT主题下使用MathJax</h2><h3 id="使用宏">1.1.1 使用宏</h3><p>比如，我们不想总是输入<code>\mathbf&#123;&#125;</code>来表示粗体，我们可以在LaTex中定义宏<code>\b</code>来减少代码量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\def\b#1&#123;&#123;\mathbf #1&#125;&#125;</span><br></pre></td></tr></table></figure><p>在Hexo中，我们可以在<code>themes/next/layout/_third-party/math/mathjax.swig</code>中增添这个宏： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.MathJax = &#123;</span><br><span class="line">  <span class="attr">tex</span>: &#123;</span><br><span class="line">    <span class="attr">macros</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;b&#x27;</span>: [<span class="string">&quot;&#123;\\mathbf #1&#125;&quot;</span>, <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> 在修改完之后需重启Hexo。</p><h2 id="部署到github上">1.2 部署到GitHub上</h2><p>需严格分为<code>hexo clean</code>hexo g</code><code>hexo d</code>三步，不要合并步骤，原因不明。</p><h1 id="报错与解决方法">2. 报错与解决方法</h1><h2 id="github-deploy-error">2.1 GitHub deploy error</h2><p>在hexo d部署之后产生： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/zeitgeist86/zeitgeist86.github.io/&#x27;</span>: SSL: no alternative certificate subject name matches target host name <span class="string">&#x27;github</span></span><br><span class="line"><span class="string">.com&#x27;</span></span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (C:\Users\admin\hexoblog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:315:20)</span><br><span class="line">      at ChildProcess.cp.emit (C:\Users\admin\hexoblog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure> 解决方法：</p><ul><li>GitHub在IP地址与系统时间不符时会启动网络安全报错，将VPN连接路线从美国切换至香港可以解决；</li><li>重启编辑器和Hexo。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇博客汇总了一些笔者遇到的Hexo使用方法、报错及解决方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Python上传文件到Cloudinary的CDN服务</title>
    <link href="http://example.com/2020/05/30/cloudinary-on-python/"/>
    <id>http://example.com/2020/05/30/cloudinary-on-python/</id>
    <published>2020-05-30T09:21:16.000Z</published>
    <updated>2021-09-30T09:56:39.295Z</updated>
    
    <content type="html"><![CDATA[<p>以Python为例，使用Cloudinary提供的免费CDN服务上传文件：</p><span id="more"></span><h1 id="安装cloudinary">1. 安装cloudinary</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cloudinary</span><br></pre></td></tr></table></figure><h1 id="加载modules">2. 加载modules</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cloudinary</span><br><span class="line"><span class="keyword">import</span> cloudinary.uploader</span><br><span class="line"><span class="keyword">import</span> cloudinary.api</span><br></pre></td></tr></table></figure><h1 id="配置cloudinary">3. 配置cloudinary</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cloudinary.config(</span><br><span class="line">  cloud_name = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  api_key = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  api_secret = <span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="上传文件">4. 上传文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可也从本地上传</span></span><br><span class="line">cloudinary.uploader.upload(<span class="string">rf&quot;https://en.wikipedia.org/wiki/File:LagrangeMultipliers2D.svg&quot;</span>,</span><br><span class="line">  public_id = <span class="string">&quot;lm_wiki&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="报错">5. 报错</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Unexpected error - ProtocolError(&#x27;Connection aborted.&#x27;, ConnectionResetError(10054, &#x27;An existing connection was forcibly closed by the remote host&#x27;, None, 10054, None))</span><br></pre></td></tr></table></figure><p>重新进行第三步即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以Python为例，使用Cloudinary提供的免费CDN服务上传文件：&lt;/p&gt;</summary>
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
